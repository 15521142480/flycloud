/*
 Navicat Premium Data Transfer

 Source Server         : mysql-one
 Source Server Type    : MySQL
 Source Server Version : 50741 (5.7.41)
 Source Host           : localhost:3306
 Source Schema         : nacos

 Target Server Type    : MySQL
 Target Server Version : 50741 (5.7.41)
 File Encoding         : 65001

 Date: 24/04/2023 10:09:39
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for config_info
-- ----------------------------
DROP TABLE IF EXISTS `config_info`;
CREATE TABLE `config_info` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `data_id` varchar(255) COLLATE utf8_bin NOT NULL COMMENT 'data_id',
  `group_id` varchar(255) COLLATE utf8_bin DEFAULT NULL,
  `content` longtext COLLATE utf8_bin NOT NULL COMMENT 'content',
  `md5` varchar(32) COLLATE utf8_bin DEFAULT NULL COMMENT 'md5',
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  `src_user` text COLLATE utf8_bin COMMENT 'source user',
  `src_ip` varchar(50) COLLATE utf8_bin DEFAULT NULL COMMENT 'source ip',
  `app_name` varchar(128) COLLATE utf8_bin DEFAULT NULL,
  `tenant_id` varchar(128) COLLATE utf8_bin DEFAULT '' COMMENT '租户字段',
  `c_desc` varchar(256) COLLATE utf8_bin DEFAULT NULL,
  `c_use` varchar(64) COLLATE utf8_bin DEFAULT NULL,
  `effect` varchar(64) COLLATE utf8_bin DEFAULT NULL,
  `type` varchar(64) COLLATE utf8_bin DEFAULT NULL,
  `c_schema` text COLLATE utf8_bin,
  `encrypted_data_key` text COLLATE utf8_bin NOT NULL COMMENT '秘钥',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)
) ENGINE=InnoDB AUTO_INCREMENT=71 DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='config_info';

-- ----------------------------
-- Records of config_info
-- ----------------------------
BEGIN;
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`, `encrypted_data_key`) VALUES (1, 'application-common.yaml', 'DEFAULT_GROUP', '\n# spring 配置\nspring:\n  # 资源信息\n  messages:\n    # 国际化资源文件路径\n    basename: i18n/messages\n  servlet:\n    multipart:\n      # 单个文件大小\n      max-file-size: 1000MB\n      # 设置总上传的文件大小\n      max-request-size: 5000MB\n  mvc:\n    format:\n      date-time: yyyy-MM-dd HH:mm:ss\n  #jackson配置\n  jackson:\n    # 日期格式化\n    date-format: yyyy-MM-dd HH:mm:ss\n    time-zone: GMT+8\n    serialization:\n      # 格式化输出\n      INDENT_OUTPUT: false\n      # 忽略无法转换的对象\n      fail_on_empty_beans: false\n    deserialization:\n      # 允许对象忽略json中不存在的属性\n      fail_on_unknown_properties: false\n  cloud:\n    # sentinel 配置\n    # sentinel:\n    #   # sentinel 开关\n    #   enabled: true\n    #   # 取消控制台懒加载\n    #   eager: true\n    #   transport:\n    #     # dashboard控制台服务名 用于服务发现\n    #     # 如无此配置将默认使用下方 dashboard 配置直接注册\n    #     server-name: ruoyi-sentinel-dashboard\n    #     # 客户端指定注册的ip 用于多网卡ip不稳点使用\n    #     # client-ip:\n    #     # 控制台地址 从1.3.0开始使用 server-name 注册\n    #     # dashboard: localhost:8718\n\n  # redis 通用配置 子服务可以自行配置进行覆盖\n  redis:\n    host: 39.98.125.88\n    port: 6379\n    # 密码(如没有密码请注释掉password字段)\n    password: 123456\n    database: 0\n    timeout: 30s\n    ssl: false\n\n\n# redisson 配置\nredisson:\n  # redis key前缀\n  keyPrefix:\n  # 线程池数量\n  threads: 4\n  # Netty线程池数量\n  nettyThreads: 8\n  # 单节点配置\n  singleServerConfig:\n    # 客户端名称\n    clientName: ${spring.application.name}\n    # 最小空闲连接数\n    connectionMinimumIdleSize: 8\n    # 连接池大小\n    connectionPoolSize: 32\n    # 连接空闲超时，单位：毫秒\n    idleConnectionTimeout: 10000\n    # 命令等待超时，单位：毫秒\n    timeout: 3000\n    # 发布和订阅连接池大小\n    subscriptionConnectionPoolSize: 50\n\n\n# springdoc 配置\nspringdoc:\n  api-docs:\n    # 是否开启接口文档\n    enabled: true\n  swagger-ui:\n    # 持久化认证数据\n    persistAuthorization: true\n\n\n# swagger 配置\nswagger:\n  enabled: true\n  title: Fly Swagger API\n  gateway: http://localhost:8080\n  token-url: ${swagger.gateway}/auth/oauth/token\n  scope: server\n  services:\n    flycloud-gateway: flycloud-gateway\n    flycloud-system: flycloud-system\n    flycloud-mall: flycloud-mall\n    flycloud-music: flycloud-music\n    flycloud-generator: flycloud-generator\n    flycloud-job: flycloud-job\n    flycloud-test: flycloud-test\n', '52f524db37564fd7329e91c586e8da91', '2023-02-13 06:48:34', '2023-04-23 03:59:16', 'nacos', '120.85.113.241', '', '', '公共配置: 如mybatis-plus, redis, es等', '', '', 'yaml', '', '');
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`, `encrypted_data_key`) VALUES (10, 'flycloud-gateway-dev.yaml', 'DEFAULT_GROUP', '\nspring:\n  cloud:\n    # 网关配置\n    gateway:\n      metrics:\n        enabled: true\n      # 打印请求日志(自定义)\n      requestLog: true\n      discovery:\n        locator:\n          # 开启服务注册和发现\n          enabled: true\n          # 自动配置路由 (手动写路由的话, swagger整合不了)\n      routes:\n\n        # swagger接口地址重写 (只改变转发路由,无其他修改), 如将 https://localhost:8080/v3/api-docs/flycloud-system 这个路径重写为 https://localhost:8080/flycloud-system/v3/api-docs\n        - id: openapi\n          uri: lb://flycloud-gateway\n          predicates:\n            - Path=/v3/api-docs/**\n          filters:\n            - RewritePath=/v3/api-docs/(?<path>.*), /$\\{path}/v3/api-docs\n\n        - id: flycloud-system              # 路由id，没有固定规则但要求唯一, 建议配合服务名\n          # uri: http://localhost:8001     # 目标地址, 即断言匹配后跳转的路由地址 (即类似nginx的代理地址)\n          uri: lb://flycloud-system\n          order: 1\n          predicates:                      # 断言（判断条件）\n            - Path=/flycloud-system/**     # 断言, 路径相匹配的进行路由; 服务一般不用设置servlet-context-path,因为直接让客户端请求带上此断言服务名字即可 (即类似nginx的断言)\n          # filters:\n            # - StripPrefix=1              # 去除第一个路径 (http://localhost:8080/aaa/order/orderInfo -> http://localhost:8080/order/orderInfo)\n            # - PrefixPath=/order          # 请求路径添加前缀 (http://localhost:8080/order/orderInfo -> http://localhost:8080/aaa/order/orderInfo)\n\n            # - RewritePath=/v3/api-docs/(?<path>.*), /$\\{path}/v3/api-docs\n            # 路由重写 (断言之前执行), 如将 https://localhost:8080/v3/api-docs/flycloud-system 这个路径重写为 https://localhost:8080/flycloud-system/v3/api-docs\n\n        - id: flycloud-mall\n          uri: lb://flycloud-mall\n          predicates:\n            - Path=/flycloud-mall/**\n\n        - id: flycloud-generator\n          uri: lb://flycloud-generator\n          predicates:\n            - Path=/flycloud-generator/**\n\n        - id: flycloud-test\n          uri: lb://flycloud-test\n          predicates:\n            - Path=/flycloud-test/**\n\n\nlogging:\n  level:\n    org:\n      springframework:\n        cloud:\n          gateway: TRACE', 'badcb53c6ef0e24ddf69c655575cefa0', '2023-04-18 09:59:31', '2023-04-23 03:58:51', 'nacos', '120.85.113.241', '', '', '', '', '', 'yaml', '', '');
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`, `encrypted_data_key`) VALUES (29, 'application-datasource.yaml', 'DEFAULT_GROUP', '\n# 数据源连接 配置\ndatasource:\n\n  # 系统模块的-主库数据源 (根据需求配置-从库数据源)\n  system-master:\n    # jdbc 所有参数配置参考 https://lionli.blog.csdn.net/article/details/122018562\n    # rewriteBatchedStatements=true 批处理优化 大幅提升批量插入更新删除性能\n    url: jdbc:mysql://localhost:3306/fly-cloud?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: 123456\n  # system-slave:\n\n  # 商城模块的-主库数据源\n  mall-master:\n    url: jdbc:mysql://localhost:3306/fly-mall?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: 123456\n\n  # 音乐模块的-主库数据源\n  music-master:\n    url: jdbc:mysql://localhost:3306/fly-music?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: 123456\n\n  # 定时任务数据库\n  job:\n    url: jdbc:mysql://localhost:3306/fly-job?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: 123456\n\n  # 自动生成数据库说明: 由于要自动生成某个数据库的表信息, 所以只需要指向你要生成的已经在使用的数据库即可\n  gen:\n    url: jdbc:mysql://localhost:3306/fly-cloud?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: 123456\n    \n#  其他数据库系统说明\n#  system-oracle:\n#    url: jdbc:oracle:thin:@//localhost:1521/XE\n#    username: ROOT\n#    password: password\n\n#  system-postgres:\n#    url: jdbc:postgresql://localhost:5432/postgres?useUnicode=true&characterEncoding=utf8&useSSL=true&autoReconnect=true&reWriteBatchedInserts=true\n#    username: root\n#    password: password\n\n\n# 数据源属性 配置\nspring:\n  datasource:\n    type: com.zaxxer.hikari.HikariDataSource\n    # 动态数据源文档 https://www.kancloud.cn/tracy5546/dynamic-datasource/content\n    dynamic:\n      # 性能分析插件(有性能损耗 不建议生产环境使用)\n      p6spy: false\n      # 开启seata代理，开启后默认每个数据源都代理，如果某个不需要代理可单独关闭\n      # seata: false\n      # 严格模式 匹配不到数据源则报错\n      strict: true\n      hikari:\n        # 最大连接池数量\n        maxPoolSize: 20\n        # 最小空闲线程数量\n        minIdle: 10\n        # 配置获取连接等待超时的时间\n        connectionTimeout: 30000\n        # 校验超时时间\n        validationTimeout: 5000\n        # 空闲连接存活最大时间，默认10分钟\n        idleTimeout: 600000\n        # 此属性控制池中连接的最长生命周期，值0表示无限生命周期，默认30分钟\n        maxLifetime: 1800000\n        # 连接测试query（配置检测连接是否有效）\n        connectionTestQuery: SELECT 1\n        # 多久检查一次连接的活性\n        keepaliveTime: 30000\n\n\n# seata配置\nseata:\n  # 关闭自动代理\n  enable-auto-data-source-proxy: false\n\n\n# MyBatisPlus配置  (https://baomidou.com/config/)\nmybatis-plus:\n  # 扫描mapper接口包有两种: (法1: 默认扫描(也就是加@Mapper注解);  法2: 手动扫描, 在相关启动配置类加上@MapperScan(\"要扫描包的路径\"),  \n  # 本项目用的是 法2 (因为基本上整个项目的包名前缀都是一样的,除非要注入第三方的bean); 如有需要支持多包可在注解配置 或 提升扫包等级 (例如 com.**.**.mapper)\n  mapperPackage: com.fly.**.mapper\n  # 对应的 XML 文件位置\n  mapperLocations: classpath*:mapper/**/*Mapper.xml\n  # 实体扫描，多个package用逗号或者分号分隔\n  typeAliasesPackage: com.fly.**.domain\n  # 启动时是否检查 MyBatis XML 文件的存在，默认不检查\n  checkConfigLocation: false\n  configuration:\n    # 自动驼峰命名规则（camel case）映射\n    mapUnderscoreToCamelCase: true\n    # MyBatis 自动映射策略\n    # NONE：不启用 PARTIAL：只对非嵌套 resultMap 自动映射 FULL：对所有 resultMap 自动映射\n    autoMappingBehavior: PARTIAL\n    # MyBatis 自动映射时未知列或未知属性处理策\n    # NONE：不做处理 WARNING：打印相关警告 FAILING：抛出异常和详细信息\n    autoMappingUnknownColumnBehavior: NONE\n    # 更详细的日志输出 会有性能损耗 org.apache.ibatis.logging.stdout.StdOutImpl\n    # 关闭日志记录 (可单纯使用 p6spy 分析) org.apache.ibatis.logging.nologging.NoLoggingImpl\n    # 默认日志输出 org.apache.ibatis.logging.slf4j.Slf4jImpl\n    logImpl: org.apache.ibatis.logging.nologging.NoLoggingImpl\n  global-config:\n    # 是否打印 Logo banner\n    banner: true\n    dbConfig:\n      # 主键类型\n      # AUTO 自增 NONE 空 INPUT 用户输入 ASSIGN_ID 雪花 ASSIGN_UUID 唯一 UUID\n      idType: ASSIGN_ID\n      # 逻辑已删除值\n      logicDeleteValue: 2\n      # 逻辑未删除值\n      logicNotDeleteValue: 0\n      insertStrategy: NOT_NULL\n      updateStrategy: NOT_NULL\n      where-strategy: NOT_NULL\n\n\n# 数据加密\nmybatis-encryptor:\n  # 是否开启加密\n  enable: false\n  # 默认加密算法\n  algorithm: BASE64\n  # 编码方式 BASE64/HEX。默认BASE64\n  encode: BASE64\n  # 安全秘钥 对称算法的秘钥 如：AES，SM4\n  password:\n  # 公私钥 非对称算法的公私钥 如：SM2，RSA\n  publicKey:\n  privateKey:\n  ', 'd43f4e9e7508216da102d134ac607541', '2023-04-20 01:20:39', '2023-04-21 11:40:44', 'nacos', '120.85.113.241', '', '', '', '', '', 'yaml', '', '');
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`, `encrypted_data_key`) VALUES (33, 'flycloud-system-dev.yaml', 'DEFAULT_GROUP', '\nspring:\n  datasource:\n    dynamic:\n      # 设置默认的数据源或者数据源组,默认值即为 master\n      primary: master\n      datasource:\n        # 主库数据源\n        master:\n          type: ${spring.datasource.type}\n          driver-class-name: com.mysql.cj.jdbc.Driver\n          url: ${datasource.system-master.url}\n          username: ${datasource.system-master.username}\n          password: ${datasource.system-master.password}\n\n\n#       其他数据库系统-参数说明:          \n#        oracle:\n#          type: ${spring.datasource.type}\n#          driverClassName: oracle.jdbc.OracleDriver\n#          url: ${datasource.system-oracle.url}\n#          username: ${datasource.system-oracle.username}\n#          password: ${datasource.system-oracle.password}\n#          hikari:\n#            connectionTestQuery: SELECT 1 FROM DUAL\n\n#        postgres:\n#          type: ${spring.datasource.type}\n#          driverClassName: org.postgresql.Driver\n#          url: ${datasource.system-postgres.url}\n#          username: ${datasource.system-postgres.username}\n#          password: ${datasource.system-postgres.password}\n', '6301cfe3dd2c8c6a82a07d305b4a9f13', '2023-04-20 01:31:21', '2023-04-21 11:39:41', 'nacos', '120.85.113.241', '', '', '', '', '', 'yaml', '', '');
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`, `encrypted_data_key`) VALUES (37, 'flycloud-job-dev.yaml', 'DEFAULT_GROUP', '\nspring:\n  datasource:\n    type: ${spring.datasource.type}\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: ${datasource.job.url}\n    username: ${datasource.job.username}\n    password: ${datasource.job.password}\n\n#        oracle:\n#          type: ${spring.datasource.type}\n#          driverClassName: oracle.jdbc.OracleDriver\n#          url: ${datasource.system-oracle.url}\n#          username: ${datasource.system-oracle.username}\n#          password: ${datasource.system-oracle.password}\n#          hikari:\n#            connectionTestQuery: SELECT 1 FROM DUAL\n\n#        postgres:\n#          type: ${spring.datasource.type}\n#          driverClassName: org.postgresql.Driver\n#          url: ${datasource.system-postgres.url}\n#          username: ${datasource.system-postgres.username}\n#          password: ${datasource.system-postgres.password}\n\n\nxxl:\n  job:\n    # 执行器开关\n    enabled: true\n    # 调度中心地址：如调度中心集群部署存在多个地址则用逗号分隔。\n    # admin-addresses: http://localhost:9900\n    # 调度中心应用名 通过服务名连接调度中心(启用admin-appname会导致admin-addresses不生效)\n    admin-appname: fly-xxl-job-admin\n    # 执行器通讯TOKEN：非空时启用\n    access-token: xxl-job\n    # 执行器配置\n    executor:\n      # 执行器AppName：执行器心跳注册分组依据；为空则关闭自动注册\n      appname: ${spring.application.name}-executor\n      # 执行器端口号 执行器从19901开始往后写\n      port: 9901\n      # 执行器注册：默认IP:PORT\n      address:\n      # 执行器IP：默认自动获取IP\n      ip:\n      # 执行器运行日志文件存储磁盘路径\n      logpath: ./logs/${spring.application.name}/xxl-job\n      # 执行器日志文件保存天数：大于3生效\n      logretentiondays: 30', '855f2453b75b7bc1f28568d1f965ff5a', '2023-04-20 02:07:37', '2023-04-20 02:07:37', NULL, '116.21.159.246', '', '', NULL, NULL, NULL, 'yaml', NULL, '');
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`, `encrypted_data_key`) VALUES (38, 'flycloud-mall-dev.yaml', 'DEFAULT_GROUP', '\nspring:\n  datasource:\n    dynamic:\n      # 设置默认的数据源或者数据源组,默认值即为 master\n      primary: master\n      datasource:\n        # 主库数据源\n        master:\n          type: ${spring.datasource.type}\n          driver-class-name: com.mysql.cj.jdbc.Driver\n          url: ${datasource.mall-master.url}\n          username: ${datasource.mall-master.username}\n          password: ${datasource.mall-master.password}\n\n\n#       其他数据库系统-参数说明:          \n#        oracle:\n#          type: ${spring.datasource.type}\n#          driverClassName: oracle.jdbc.OracleDriver\n#          url: ${datasource.mall-oracle.url}\n#          username: ${datasource.mall-oracle.username}\n#          password: ${datasource.mall-oracle.password}\n#          hikari:\n#            connectionTestQuery: SELECT 1 FROM DUAL\n\n#        postgres:\n#          type: ${spring.datasource.type}\n#          driverClassName: org.postgresql.Driver\n#          url: ${datasource.mall-postgres.url}\n#          username: ${datasource.mall-postgres.username}\n#          password: ${datasource.mall-postgres.password}\n', 'a8815931a4ab595219486f36619f3156', '2023-04-20 02:09:23', '2023-04-20 02:09:23', NULL, '116.21.159.246', '', '', NULL, NULL, NULL, 'yaml', NULL, '');
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`, `encrypted_data_key`) VALUES (40, 'flycloud-music-dev.yaml', 'DEFAULT_GROUP', '\nspring:\n  datasource:\n    dynamic:\n      # 设置默认的数据源或者数据源组,默认值即为 master\n      primary: master\n      datasource:\n        # 主库数据源\n        master:\n          type: ${spring.datasource.type}\n          driver-class-name: com.mysql.cj.jdbc.Driver\n          url: ${datasource.music-master.url}\n          username: ${datasource.music-master.username}\n          password: ${datasource.music-master.password}\n\n\n#       其他数据库系统-参数说明:          \n#        oracle:\n#          type: ${spring.datasource.type}\n#          driverClassName: oracle.jdbc.OracleDriver\n#          url: ${datasource.music-oracle.url}\n#          username: ${datasource.music-oracle.username}\n#          password: ${datasource.music-oracle.password}\n#          hikari:\n#            connectionTestQuery: SELECT 1 FROM DUAL\n\n#        postgres:\n#          type: ${spring.datasource.type}\n#          driverClassName: org.postgresql.Driver\n#          url: ${datasource.music-postgres.url}\n#          username: ${datasource.music-postgres.username}\n#          password: ${datasource.music-postgres.password}\n', 'f03cd2776ac489e9528efeb47540fc06', '2023-04-20 02:10:56', '2023-04-20 02:10:56', NULL, '116.21.159.246', '', '', NULL, NULL, NULL, 'yaml', NULL, '');
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`, `encrypted_data_key`) VALUES (46, 'seata-server.properties', 'DEFAULT_GROUP', '\nservice.vgroupMapping.ruoyi-auth-group=default\nservice.vgroupMapping.ruoyi-system-group=default\nservice.vgroupMapping.ruoyi-resource-group=default\nservice.vgroupMapping.ruoyi-gen-group=default\nservice.vgroupMapping.ruoyi-job-group=default\n\nservice.enableDegrade=false\nservice.disableGlobalTransaction=false\n\n#Transaction storage configuration, only for the server. The file, DB, and redis configuration values are optional.\nstore.mode=db\nstore.lock.mode=db\nstore.session.mode=db\n#Used for password encryption\nstore.publicKey=\n\n#These configurations are required if the `store mode` is `db`. If `store.mode,store.lock.mode,store.session.mode` are not equal to `db`, you can remove the configuration block.\nstore.db.datasource=hikari\nstore.db.dbType=mysql\nstore.db.driverClassName=com.mysql.cj.jdbc.Driver\nstore.db.url=jdbc:mysql://39.98.125.88/fly-seata?useUnicode=true&rewriteBatchedStatements=true\nstore.db.user=root\nstore.db.password=155007\nstore.db.minConn=5\nstore.db.maxConn=30\nstore.db.globalTable=global_table\nstore.db.branchTable=branch_table\nstore.db.distributedLockTable=distributed_lock\nstore.db.queryLimit=100\nstore.db.lockTable=lock_table\nstore.db.maxWait=5000\n\n# redis 模式 store.mode=redis 开启 (控制台查询功能有限,不影响实际执行功能)\n# store.redis.host=127.0.0.1\n# store.redis.port=6379\n# 最大连接数\n# store.redis.maxConn=10\n# 最小连接数\n# store.redis.minConn=1\n# store.redis.database=0\n# store.redis.password=\n# store.redis.queryLimit=100\n\n#Transaction rule configuration, only for the server\nserver.recovery.committingRetryPeriod=1000\nserver.recovery.asynCommittingRetryPeriod=1000\nserver.recovery.rollbackingRetryPeriod=1000\nserver.recovery.timeoutRetryPeriod=1000\nserver.maxCommitRetryTimeout=-1\nserver.maxRollbackRetryTimeout=-1\nserver.rollbackRetryTimeoutUnlockEnable=false\nserver.distributedLockExpireTime=10000\nserver.xaerNotaRetryTimeout=60000\nserver.session.branchAsyncQueueSize=5000\nserver.session.enableBranchAsyncRemove=false\n\n#Transaction rule configuration, only for the client\nclient.rm.asyncCommitBufferLimit=10000\nclient.rm.lock.retryInterval=10\nclient.rm.lock.retryTimes=30\nclient.rm.lock.retryPolicyBranchRollbackOnConflict=true\nclient.rm.reportRetryCount=5\nclient.rm.tableMetaCheckEnable=true\nclient.rm.tableMetaCheckerInterval=60000\nclient.rm.sqlParserType=druid\nclient.rm.reportSuccessEnable=false\nclient.rm.sagaBranchRegisterEnable=false\nclient.rm.sagaJsonParser=fastjson\nclient.rm.tccActionInterceptorOrder=-2147482648\nclient.tm.commitRetryCount=5\nclient.tm.rollbackRetryCount=5\nclient.tm.defaultGlobalTransactionTimeout=60000\nclient.tm.degradeCheck=false\nclient.tm.degradeCheckAllowTimes=10\nclient.tm.degradeCheckPeriod=2000\nclient.tm.interceptorOrder=-2147482648\nclient.undo.dataValidation=true\nclient.undo.logSerialization=jackson\nclient.undo.onlyCareUpdateColumns=true\nserver.undo.logSaveDays=7\nserver.undo.logDeletePeriod=86400000\nclient.undo.logTable=undo_log\nclient.undo.compress.enable=true\nclient.undo.compress.type=zip\nclient.undo.compress.threshold=64k\n\n#For TCC transaction mode\ntcc.fence.logTableName=tcc_fence_log\ntcc.fence.cleanPeriod=1h\n\n#Log rule configuration, for client and server\nlog.exceptionRate=100\n\n#Metrics configuration, only for the server\nmetrics.enabled=false\nmetrics.registryType=compact\nmetrics.exporterList=prometheus\nmetrics.exporterPrometheusPort=9898\n\n#For details about configuration items, see https://seata.io/zh-cn/docs/user/configurations.html\n#Transport configuration, for client and server\ntransport.type=TCP\ntransport.server=NIO\ntransport.heartbeat=true\ntransport.enableTmClientBatchSendRequest=false\ntransport.enableRmClientBatchSendRequest=true\ntransport.enableTcServerBatchSendResponse=false\ntransport.rpcRmRequestTimeout=30000\ntransport.rpcTmRequestTimeout=30000\ntransport.rpcTcRequestTimeout=30000\ntransport.threadFactory.bossThreadPrefix=NettyBoss\ntransport.threadFactory.workerThreadPrefix=NettyServerNIOWorker\ntransport.threadFactory.serverExecutorThreadPrefix=NettyServerBizHandler\ntransport.threadFactory.shareBossWorker=false\ntransport.threadFactory.clientSelectorThreadPrefix=NettyClientSelector\ntransport.threadFactory.clientSelectorThreadSize=1\ntransport.threadFactory.clientWorkerThreadPrefix=NettyClientWorkerThread\ntransport.threadFactory.bossThreadSize=1\ntransport.threadFactory.workerThreadSize=default\ntransport.shutdown.wait=3\ntransport.serialization=seata\ntransport.compressor=none\n', 'e70b200cf104c0624cf8e847a0fb13d8', '2023-04-20 11:20:39', '2023-04-20 11:20:39', NULL, '116.21.159.246', '', '', NULL, NULL, NULL, 'properties', NULL, '');
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`, `encrypted_data_key`) VALUES (64, 'flycloud-generator-dev.yaml', 'DEFAULT_GROUP', '\nspring:\n  datasource:\n    dynamic:\n      # 设置默认的数据源或者数据源组,默认值即为 master\n      primary: master\n      datasource:\n        # 主库数据源\n        master:\n          type: ${spring.datasource.type}\n          driver-class-name: com.mysql.cj.jdbc.Driver\n          url: ${datasource.system-master.url}\n          username: ${datasource.system-master.username}\n          password: ${datasource.system-master.password}\n\n\n#        oracle:\n#          type: ${spring.datasource.type}\n#          driverClassName: oracle.jdbc.OracleDriver\n#          url: ${datasource.system-oracle.url}\n#          username: ${datasource.system-oracle.username}\n#          password: ${datasource.system-oracle.password}\n#          hikari:\n#            connectionTestQuery: SELECT 1 FROM DUAL\n\n#        postgres:\n#          type: ${spring.datasource.type}\n#          driverClassName: org.postgresql.Driver\n#          url: ${datasource.system-postgres.url}\n#          username: ${datasource.system-postgres.username}\n#          password: ${datasource.system-postgres.password}\n\n# 代码生成 配置\ngen:\n  # 作者\n  author: fly\n  # 默认生成包路径 system 需改成自己的模块名称 如 system monitor tool\n  packageName: com.fly.system\n  # 自动去除表前缀，默认是false\n  autoRemovePre: false\n  # 表前缀（生成类名不会包含表前缀，多个用逗号分隔）\n  tablePrefix: sys_', 'f266a6b3de235c6628c4d0694d2e993e', '2023-04-21 13:35:22', '2023-04-21 13:35:51', 'nacos', '116.21.159.246', '', '', '', '', '', 'yaml', '', '');
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`, `encrypted_data_key`) VALUES (67, 'flycloud-test-dev.yaml', 'DEFAULT_GROUP', '\nspring:\n  datasource:\n    dynamic:\n      # 设置默认的数据源或者数据源组,默认值即为 master\n      primary: master\n      datasource:\n        # 主库数据源\n        master:\n          type: ${spring.datasource.type}\n          driver-class-name: com.mysql.cj.jdbc.Driver\n          url: ${datasource.system-master.url}\n          username: ${datasource.system-master.username}\n          password: ${datasource.system-master.password}\n', '8e2306d55b225ae3992b1afad4042639', '2023-04-23 03:37:32', '2023-04-23 03:37:32', NULL, '116.21.159.246', '', '', NULL, NULL, NULL, 'yaml', NULL, '');
COMMIT;

-- ----------------------------
-- Table structure for config_info_aggr
-- ----------------------------
DROP TABLE IF EXISTS `config_info_aggr`;
CREATE TABLE `config_info_aggr` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `data_id` varchar(255) COLLATE utf8_bin NOT NULL COMMENT 'data_id',
  `group_id` varchar(255) COLLATE utf8_bin NOT NULL COMMENT 'group_id',
  `datum_id` varchar(255) COLLATE utf8_bin NOT NULL COMMENT 'datum_id',
  `content` longtext COLLATE utf8_bin NOT NULL COMMENT '内容',
  `gmt_modified` datetime NOT NULL COMMENT '修改时间',
  `app_name` varchar(128) COLLATE utf8_bin DEFAULT NULL,
  `tenant_id` varchar(128) COLLATE utf8_bin DEFAULT '' COMMENT '租户字段',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='增加租户字段';

-- ----------------------------
-- Records of config_info_aggr
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for config_info_beta
-- ----------------------------
DROP TABLE IF EXISTS `config_info_beta`;
CREATE TABLE `config_info_beta` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `data_id` varchar(255) COLLATE utf8_bin NOT NULL COMMENT 'data_id',
  `group_id` varchar(128) COLLATE utf8_bin NOT NULL COMMENT 'group_id',
  `app_name` varchar(128) COLLATE utf8_bin DEFAULT NULL COMMENT 'app_name',
  `content` longtext COLLATE utf8_bin NOT NULL COMMENT 'content',
  `beta_ips` varchar(1024) COLLATE utf8_bin DEFAULT NULL COMMENT 'betaIps',
  `md5` varchar(32) COLLATE utf8_bin DEFAULT NULL COMMENT 'md5',
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  `src_user` text COLLATE utf8_bin COMMENT 'source user',
  `src_ip` varchar(50) COLLATE utf8_bin DEFAULT NULL COMMENT 'source ip',
  `tenant_id` varchar(128) COLLATE utf8_bin DEFAULT '' COMMENT '租户字段',
  `encrypted_data_key` text COLLATE utf8_bin NOT NULL COMMENT '秘钥',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='config_info_beta';

-- ----------------------------
-- Records of config_info_beta
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for config_info_tag
-- ----------------------------
DROP TABLE IF EXISTS `config_info_tag`;
CREATE TABLE `config_info_tag` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `data_id` varchar(255) COLLATE utf8_bin NOT NULL COMMENT 'data_id',
  `group_id` varchar(128) COLLATE utf8_bin NOT NULL COMMENT 'group_id',
  `tenant_id` varchar(128) COLLATE utf8_bin DEFAULT '' COMMENT 'tenant_id',
  `tag_id` varchar(128) COLLATE utf8_bin NOT NULL COMMENT 'tag_id',
  `app_name` varchar(128) COLLATE utf8_bin DEFAULT NULL COMMENT 'app_name',
  `content` longtext COLLATE utf8_bin NOT NULL COMMENT 'content',
  `md5` varchar(32) COLLATE utf8_bin DEFAULT NULL COMMENT 'md5',
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  `src_user` text COLLATE utf8_bin COMMENT 'source user',
  `src_ip` varchar(50) COLLATE utf8_bin DEFAULT NULL COMMENT 'source ip',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='config_info_tag';

-- ----------------------------
-- Records of config_info_tag
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for config_tags_relation
-- ----------------------------
DROP TABLE IF EXISTS `config_tags_relation`;
CREATE TABLE `config_tags_relation` (
  `id` bigint(20) NOT NULL COMMENT 'id',
  `tag_name` varchar(128) COLLATE utf8_bin NOT NULL COMMENT 'tag_name',
  `tag_type` varchar(64) COLLATE utf8_bin DEFAULT NULL COMMENT 'tag_type',
  `data_id` varchar(255) COLLATE utf8_bin NOT NULL COMMENT 'data_id',
  `group_id` varchar(128) COLLATE utf8_bin NOT NULL COMMENT 'group_id',
  `tenant_id` varchar(128) COLLATE utf8_bin DEFAULT '' COMMENT 'tenant_id',
  `nid` bigint(20) NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`nid`),
  UNIQUE KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`),
  KEY `idx_tenant_id` (`tenant_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='config_tag_relation';

-- ----------------------------
-- Records of config_tags_relation
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for group_capacity
-- ----------------------------
DROP TABLE IF EXISTS `group_capacity`;
CREATE TABLE `group_capacity` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `group_id` varchar(128) COLLATE utf8_bin NOT NULL DEFAULT '' COMMENT 'Group ID，空字符表示整个集群',
  `quota` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '配额，0表示使用默认值',
  `usage` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '使用量',
  `max_size` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '单个配置大小上限，单位为字节，0表示使用默认值',
  `max_aggr_count` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '聚合子配置最大个数，，0表示使用默认值',
  `max_aggr_size` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值',
  `max_history_count` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '最大变更历史数量',
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_group_id` (`group_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='集群、各Group容量信息表';

-- ----------------------------
-- Records of group_capacity
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for his_config_info
-- ----------------------------
DROP TABLE IF EXISTS `his_config_info`;
CREATE TABLE `his_config_info` (
  `id` bigint(20) unsigned NOT NULL,
  `nid` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `data_id` varchar(255) COLLATE utf8_bin NOT NULL,
  `group_id` varchar(128) COLLATE utf8_bin NOT NULL,
  `app_name` varchar(128) COLLATE utf8_bin DEFAULT NULL COMMENT 'app_name',
  `content` longtext COLLATE utf8_bin NOT NULL,
  `md5` varchar(32) COLLATE utf8_bin DEFAULT NULL,
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `src_user` text COLLATE utf8_bin,
  `src_ip` varchar(50) COLLATE utf8_bin DEFAULT NULL,
  `op_type` char(10) COLLATE utf8_bin DEFAULT NULL,
  `tenant_id` varchar(128) COLLATE utf8_bin DEFAULT '' COMMENT '租户字段',
  `encrypted_data_key` text COLLATE utf8_bin NOT NULL COMMENT '秘钥',
  PRIMARY KEY (`nid`),
  KEY `idx_gmt_create` (`gmt_create`),
  KEY `idx_gmt_modified` (`gmt_modified`),
  KEY `idx_did` (`data_id`)
) ENGINE=InnoDB AUTO_INCREMENT=76 DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='多租户改造';

-- ----------------------------
-- Records of his_config_info
-- ----------------------------
BEGIN;
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (3, 8, 'flycloud-system-dev.yaml', 'DEFAULT_GROUP', '', 'sys:\n  name: IamSystem', '8e49db55c482887aff7db2b895b7c790', '2023-04-17 09:15:09', '2023-04-17 09:15:09', 'nacos', '112.94.100.87', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (1, 9, 'common.yaml', 'DEFAULT_GROUP', '', '\nspring:\n  jackson:\n    time-zone: GMT+8', '4963db639c4046ddd29271a5d8bb1257', '2023-04-18 05:17:44', '2023-04-18 05:17:44', 'nacos', '120.85.115.194', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (1, 10, 'common.yaml', 'DEFAULT_GROUP', '', '\n# spring配置\nspring:\n  # 文件上传\n  servlet:\n    multipart:\n      # 单个文件大小\n      max-file-size: 10MB\n      # 设置总上传的文件大小\n      max-request-size: 20MB\n  jackson:\n    # 日期格式化\n    date-format: yyyy-MM-dd HH:mm:ss\n    time-zone: GMT+8', 'dd06c11adc6d8f0962f8d7c150924298', '2023-04-18 05:18:09', '2023-04-18 05:18:09', 'nacos', '120.85.115.194', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (0, 11, 'flycloud-gateway-dev', 'DEFAULT_GROUP', '', '\nspring:\n\n    gateway:\n      metrics:\n        enabled: true\n      discovery:\n        locator:\n          # 开启服务注册和发现\n          enabled: true\n          # 自动配置路由 (手动写路由的话, swagger整合不了)\n      routes:\n        - id: flycloud-system     # 路由id，没有固定规则但要求唯一, 建议配合服务名\n          # uri: http://localhost:8001     # 匹配后提供服务的路由地址 (即类似nginx的代理地址)\n          uri: lb://flycloud-system\n          order: 1\n          predicates:\n            - Path=/flycloud-system/**      # 断言, 路径相匹配的进行路由; 服务一般不用设置servlet-context-path,因为直接让客户端请求带上此断言服务名字即可 (即类似nginx的断言)\n          # filters:\n            # - StripPrefix=1     # 去除第一个路径 (http://localhost:8001/aaa/order/orderInfo -> http://localhost:8001/order/orderInfo)\n            # - PrefixPath=/order     # 请求路径添加前缀 (http://localhost:8001/order/orderInfo -> http://localhost:8001/aaa/order/orderInfo)\n\n        - id: flycloud-mall\n          uri: lb://flycloud-mall\n          predicates:\n            - Path=/flycloud-mall/**\n\n        - id: flycloud-mall\n          uri: http://localhost:${server.port}\n          predicates:\n            - Path=/v3/api-docs/**\n          filters:\n            - RewritePath=/v3/api-docs/(?<path>.*), /$\\{path}/v3/api-docs\n\nspringdoc:\n  swagger-ui:\n    path: doc.html\n\n\n# swagger 配置\nswagger:\n  enabled: true\n  title: Edevp Swagger API\n  gateway: http://${GATEWAY_HOST:edevp-gateway}:${GATEWAY-PORT:8899}\n  token-url: ${swagger.gateway}/auth/oauth/token\n  scope: server\n  services:\n    edevp-system: flycloud-system\n    edevp-mall: flycloud-mall\n\n\nlogging:\n  level:\n    org:\n      springframework:\n        cloud:\n          gateway: TRACE', 'cbc00879428ba62ea6259578e6c2e6f2', '2023-04-18 09:59:31', '2023-04-18 09:59:31', NULL, '61.140.199.188', 'I', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (10, 12, 'flycloud-gateway-dev.yaml', 'DEFAULT_GROUP', '', '\nspring:\n\n    gateway:\n      metrics:\n        enabled: true\n      discovery:\n        locator:\n          # 开启服务注册和发现\n          enabled: true\n          # 自动配置路由 (手动写路由的话, swagger整合不了)\n      routes:\n        - id: flycloud-system     # 路由id，没有固定规则但要求唯一, 建议配合服务名\n          # uri: http://localhost:8001     # 匹配后提供服务的路由地址 (即类似nginx的代理地址)\n          uri: lb://flycloud-system\n          order: 1\n          predicates:\n            - Path=/flycloud-system/**      # 断言, 路径相匹配的进行路由; 服务一般不用设置servlet-context-path,因为直接让客户端请求带上此断言服务名字即可 (即类似nginx的断言)\n          # filters:\n            # - StripPrefix=1     # 去除第一个路径 (http://localhost:8001/aaa/order/orderInfo -> http://localhost:8001/order/orderInfo)\n            # - PrefixPath=/order     # 请求路径添加前缀 (http://localhost:8001/order/orderInfo -> http://localhost:8001/aaa/order/orderInfo)\n\n        - id: flycloud-mall\n          uri: lb://flycloud-mall\n          predicates:\n            - Path=/flycloud-mall/**\n\n        - id: flycloud-mall\n          uri: http://localhost:${server.port}\n          predicates:\n            - Path=/v3/api-docs/**\n          filters:\n            - RewritePath=/v3/api-docs/(?<path>.*), /$\\{path}/v3/api-docs\n\nspringdoc:\n  swagger-ui:\n    path: doc.html\n\n\n# swagger 配置\nswagger:\n  enabled: true\n  title: Edevp Swagger API\n  gateway: http://${GATEWAY_HOST:edevp-gateway}:${GATEWAY-PORT:8899}\n  token-url: ${swagger.gateway}/auth/oauth/token\n  scope: server\n  services:\n    edevp-system: flycloud-system\n    edevp-mall: flycloud-mall\n\n\nlogging:\n  level:\n    org:\n      springframework:\n        cloud:\n          gateway: TRACE', 'cbc00879428ba62ea6259578e6c2e6f2', '2023-04-18 12:12:48', '2023-04-18 12:12:48', 'nacos', '120.85.115.88', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (10, 13, 'flycloud-gateway-dev.yaml', 'DEFAULT_GROUP', '', '\nspring:\n\n    gateway:\n      metrics:\n        enabled: true\n      discovery:\n        locator:\n          # 开启服务注册和发现\n          enabled: true\n          # 自动配置路由 (手动写路由的话, swagger整合不了)\n      routes:\n\n        # 固定路由转发配置 无修改\n        - id: openapi\n          uri: lb://flycloud-gateway\n          predicates:\n            - Path=/v3/api-docs/**\n          filters:\n            - RewritePath=/v3/api-docs/(?<path>.*), /$\\{path}/v3/api-docs\n\n        - id: flycloud-system     # 路由id，没有固定规则但要求唯一, 建议配合服务名\n          # uri: http://localhost:8001     # 匹配后提供服务的路由地址 (即类似nginx的代理地址)\n          uri: lb://flycloud-system\n          order: 1\n          predicates:\n            - Path=/flycloud-system/**      # 断言, 路径相匹配的进行路由; 服务一般不用设置servlet-context-path,因为直接让客户端请求带上此断言服务名字即可 (即类似nginx的断言)\n          # filters:\n            # - StripPrefix=1     # 去除第一个路径 (http://localhost:8001/aaa/order/orderInfo -> http://localhost:8001/order/orderInfo)\n            # - PrefixPath=/order     # 请求路径添加前缀 (http://localhost:8001/order/orderInfo -> http://localhost:8001/aaa/order/orderInfo)\n\n        - id: flycloud-mall\n          uri: lb://flycloud-mall\n          predicates:\n            - Path=/flycloud-mall/**\n\n        - id: flycloud-mall\n          uri: http://localhost:${server.port}\n          predicates:\n            - Path=/v3/api-docs/**\n          filters:\n            - RewritePath=/v3/api-docs/(?<path>.*), /$\\{path}/v3/api-docs\n\nspringdoc:\n  swagger-ui:\n    path: doc.html\n\n\n# swagger 配置\nswagger:\n  enabled: true\n  title: Edevp Swagger API\n  gateway: http://${GATEWAY_HOST:edevp-gateway}:${GATEWAY-PORT:8899}\n  token-url: ${swagger.gateway}/auth/oauth/token\n  scope: server\n  services:\n    edevp-system: flycloud-system\n    edevp-mall: flycloud-mall\n\n\nlogging:\n  level:\n    org:\n      springframework:\n        cloud:\n          gateway: TRACE', '2c71d1716bdb50963dd57c45d376d8bf', '2023-04-18 13:49:24', '2023-04-18 13:49:25', 'nacos', '112.94.100.87', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (10, 14, 'flycloud-gateway-dev.yaml', 'DEFAULT_GROUP', '', '\nspring:\n\n    gateway:\n      metrics:\n        enabled: true\n      discovery:\n        locator:\n          # 开启服务注册和发现\n          enabled: true\n          # 自动配置路由 (手动写路由的话, swagger整合不了)\n      routes:\n\n        # 固定路由转发配置 无修改\n        - id: openapi\n          uri: lb://flycloud-gateway\n          predicates:\n            - Path=/v3/api-docs/**\n          filters:\n            - RewritePath=/v3/api-docs/(?<path>.*), /$\\{path}/v3/api-docs\n\n        - id: flycloud-system     # 路由id，没有固定规则但要求唯一, 建议配合服务名\n          # uri: http://localhost:8001     # 匹配后提供服务的路由地址 (即类似nginx的代理地址)\n          uri: lb://flycloud-system\n          order: 1\n          predicates:\n            - Path=/flycloud-system/**      # 断言, 路径相匹配的进行路由; 服务一般不用设置servlet-context-path,因为直接让客户端请求带上此断言服务名字即可 (即类似nginx的断言)\n          # filters:\n            # - StripPrefix=1     # 去除第一个路径 (http://localhost:8001/aaa/order/orderInfo -> http://localhost:8001/order/orderInfo)\n            # - PrefixPath=/order     # 请求路径添加前缀 (http://localhost:8001/order/orderInfo -> http://localhost:8001/aaa/order/orderInfo)\n\n        - id: flycloud-mall\n          uri: lb://flycloud-mall\n          predicates:\n            - Path=/flycloud-mall/**\n\n        - id: flycloud-mall\n          uri: http://localhost:${server.port}\n          predicates:\n            - Path=/v3/api-docs/**\n          filters:\n            - RewritePath=/v3/api-docs/(?<path>.*), /$\\{path}/v3/api-docs\n\nspringdoc:\n  swagger-ui:\n    path: doc.html\n\n\n# swagger 配置\nswagger:\n  enabled: true\n  title: Edevp Swagger API\n  gateway: http://${localhost:flycloud-gateway}:${server.port:8899}\n  token-url: ${swagger.gateway}/auth/oauth/token\n  scope: server\n  services:\n    edevp-system: flycloud-system\n    edevp-mall: flycloud-mall\n\n\nlogging:\n  level:\n    org:\n      springframework:\n        cloud:\n          gateway: TRACE', '49cc9ea4e923276f27e7e98cb1d89df2', '2023-04-18 13:51:15', '2023-04-18 13:51:15', 'nacos', '61.140.199.188', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (10, 15, 'flycloud-gateway-dev.yaml', 'DEFAULT_GROUP', '', '\nspring:\n\n    gateway:\n      metrics:\n        enabled: true\n      discovery:\n        locator:\n          # 开启服务注册和发现\n          enabled: true\n          # 自动配置路由 (手动写路由的话, swagger整合不了)\n      routes:\n\n        # 固定路由转发配置 无修改\n        - id: openapi\n          uri: lb://flycloud-gateway\n          predicates:\n            - Path=/v3/api-docs/**\n          filters:\n            - RewritePath=/v3/api-docs/(?<path>.*), /$\\{path}/v3/api-docs\n\n        - id: flycloud-system     # 路由id，没有固定规则但要求唯一, 建议配合服务名\n          # uri: http://localhost:8001     # 匹配后提供服务的路由地址 (即类似nginx的代理地址)\n          uri: lb://flycloud-system\n          order: 1\n          predicates:\n            - Path=/flycloud-system/**      # 断言, 路径相匹配的进行路由; 服务一般不用设置servlet-context-path,因为直接让客户端请求带上此断言服务名字即可 (即类似nginx的断言)\n          # filters:\n            # - StripPrefix=1     # 去除第一个路径 (http://localhost:8001/aaa/order/orderInfo -> http://localhost:8001/order/orderInfo)\n            # - PrefixPath=/order     # 请求路径添加前缀 (http://localhost:8001/order/orderInfo -> http://localhost:8001/aaa/order/orderInfo)\n\n        - id: flycloud-mall\n          uri: lb://flycloud-mall\n          predicates:\n            - Path=/flycloud-mall/**\n\n        - id: flycloud-mall\n          uri: http://localhost:${server.port}\n          predicates:\n            - Path=/v3/api-docs/**\n          filters:\n            - RewritePath=/v3/api-docs/(?<path>.*), /$\\{path}/v3/api-docs\n\nspringdoc:\n  swagger-ui:\n    path: doc.html\n\n\n# swagger 配置\nswagger:\n  enabled: true\n  title: Edevp Swagger API\n  gateway: http://localhost:${server.port:8899}\n  token-url: ${swagger.gateway}/auth/oauth/token\n  scope: server\n  services:\n    edevp-system: flycloud-system\n    edevp-mall: flycloud-mall\n\n\nlogging:\n  level:\n    org:\n      springframework:\n        cloud:\n          gateway: TRACE', 'a1bb0d3da1000bfdaa403776a8fec9db', '2023-04-18 13:52:48', '2023-04-18 13:52:48', 'nacos', '112.94.100.87', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (10, 16, 'flycloud-gateway-dev.yaml', 'DEFAULT_GROUP', '', '\nspring:\n\n    gateway:\n      metrics:\n        enabled: true\n      discovery:\n        locator:\n          # 开启服务注册和发现\n          enabled: true\n          # 自动配置路由 (手动写路由的话, swagger整合不了)\n      routes:\n\n        # 固定路由转发配置 无修改\n        - id: openapi\n          uri: lb://flycloud-gateway\n          predicates:\n            - Path=/v3/api-docs/**\n          filters:\n            - RewritePath=/v3/api-docs/(?<path>.*), /$\\{path}/v3/api-docs\n\n        - id: flycloud-system     # 路由id，没有固定规则但要求唯一, 建议配合服务名\n          # uri: http://localhost:8001     # 匹配后提供服务的路由地址 (即类似nginx的代理地址)\n          uri: lb://flycloud-system\n          order: 1\n          predicates:\n            - Path=/flycloud-system/**      # 断言, 路径相匹配的进行路由; 服务一般不用设置servlet-context-path,因为直接让客户端请求带上此断言服务名字即可 (即类似nginx的断言)\n          # filters:\n            # - StripPrefix=1     # 去除第一个路径 (http://localhost:8001/aaa/order/orderInfo -> http://localhost:8001/order/orderInfo)\n            # - PrefixPath=/order     # 请求路径添加前缀 (http://localhost:8001/order/orderInfo -> http://localhost:8001/aaa/order/orderInfo)\n\n        - id: flycloud-mall\n          uri: lb://flycloud-mall\n          predicates:\n            - Path=/flycloud-mall/**\n\n        - id: flycloud-mall\n          uri: http://localhost:${server.port}\n          predicates:\n            - Path=/v3/api-docs/**\n          filters:\n            - RewritePath=/v3/api-docs/(?<path>.*), /$\\{path}/v3/api-docs\n\nspringdoc:\n  swagger-ui:\n    path: doc.html\n\n\n# swagger 配置\nswagger:\n  enabled: true\n  title: Edevp Swagger API\n  gateway: http://localhost:${server.port:8899}\n  token-url: ${swagger.gateway}/auth/oauth/token\n  scope: server\n  services:\n    flycloud-gateway: flycloud-gateway\n    flycloud-system: flycloud-system\n    flycloud-mall: flycloud-mall\n\n\nlogging:\n  level:\n    org:\n      springframework:\n        cloud:\n          gateway: TRACE', '12b9f8de2f80e7b076262645b7c62cee', '2023-04-18 13:55:15', '2023-04-18 13:55:16', 'nacos', '120.85.115.246', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (1, 17, 'common.yaml', 'DEFAULT_GROUP', '', '\n# spring配置\nspring:\n  # 文件上传\n  servlet:\n    multipart:\n      # 单个文件大小\n      max-file-size: 1000MB\n      # 设置总上传的文件大小\n      max-request-size: 5000MB\n  jackson:\n    # 日期格式化\n    date-format: yyyy-MM-dd HH:mm:ss\n    time-zone: GMT+8', '0831ad647f32da5a58446de77b7f768d', '2023-04-18 13:55:33', '2023-04-18 13:55:34', 'nacos', '120.85.115.246', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (10, 18, 'flycloud-gateway-dev.yaml', 'DEFAULT_GROUP', '', '\nspring:\n\n    gateway:\n      metrics:\n        enabled: true\n      discovery:\n        locator:\n          # 开启服务注册和发现\n          enabled: true\n          # 自动配置路由 (手动写路由的话, swagger整合不了)\n      routes:\n\n        # 固定路由转发配置 无修改\n        - id: openapi\n          uri: lb://flycloud-gateway\n          predicates:\n            - Path=/v3/api-docs/**\n          filters:\n            - RewritePath=/v3/api-docs/(?<path>.*), /$\\{path}/v3/api-docs\n\n        - id: flycloud-system     # 路由id，没有固定规则但要求唯一, 建议配合服务名\n          # uri: http://localhost:8001     # 匹配后提供服务的路由地址 (即类似nginx的代理地址)\n          uri: lb://flycloud-system\n          order: 1\n          predicates:\n            - Path=/flycloud-system/**      # 断言, 路径相匹配的进行路由; 服务一般不用设置servlet-context-path,因为直接让客户端请求带上此断言服务名字即可 (即类似nginx的断言)\n          # filters:\n            # - StripPrefix=1     # 去除第一个路径 (http://localhost:8001/aaa/order/orderInfo -> http://localhost:8001/order/orderInfo)\n            # - PrefixPath=/order     # 请求路径添加前缀 (http://localhost:8001/order/orderInfo -> http://localhost:8001/aaa/order/orderInfo)\n\n        - id: flycloud-mall\n          uri: lb://flycloud-mall\n          predicates:\n            - Path=/flycloud-mall/**\n\n        - id: flycloud-mall\n          uri: http://localhost:${server.port}\n          predicates:\n            - Path=/v3/api-docs/**\n          filters:\n            - RewritePath=/v3/api-docs/(?<path>.*), /$\\{path}/v3/api-docs\n\n\nlogging:\n  level:\n    org:\n      springframework:\n        cloud:\n          gateway: TRACE', 'd298171b9857842fa989d4d397717432', '2023-04-18 14:16:07', '2023-04-18 14:16:07', 'nacos', '120.85.98.216', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (1, 19, 'common.yaml', 'DEFAULT_GROUP', '', '\n# spring配置\nspring:\n  # 文件上传\n  servlet:\n    multipart:\n      # 单个文件大小\n      max-file-size: 1000MB\n      # 设置总上传的文件大小\n      max-request-size: 5000MB\n  jackson:\n    # 日期格式化\n    date-format: yyyy-MM-dd HH:mm:ss\n    time-zone: GMT+8\n\n\nspringdoc:\n  swagger-ui:\n    path: doc.html\n\n\n# swagger 配置\nswagger:\n  enabled: true\n  title: Edevp Swagger API\n  gateway: http://localhost:${server.port:8899}\n  token-url: ${swagger.gateway}/auth/oauth/token\n  scope: server\n  services:\n    flycloud-gateway: flycloud-gateway\n    flycloud-system: flycloud-system\n    flycloud-mall: flycloud-mall\n', 'b7f6830ee651e30c0efdca882a15da97', '2023-04-18 14:20:52', '2023-04-18 14:20:52', 'nacos', '120.85.115.88', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (1, 20, 'common.yaml', 'DEFAULT_GROUP', '', '\n# spring配置\nspring:\n  # 文件上传\n  servlet:\n    multipart:\n      # 单个文件大小\n      max-file-size: 1000MB\n      # 设置总上传的文件大小\n      max-request-size: 5000MB\n  jackson:\n    # 日期格式化\n    date-format: yyyy-MM-dd HH:mm:ss\n    time-zone: GMT+8\n\n\nspringdoc:\n  api-docs:\n    enabled: true\n  # swagger-ui:\n  #   path: doc.html\n\n\n# swagger 配置\nswagger:\n  enabled: true\n  title: Edevp Swagger API\n  gateway: http://localhost:${server.port:8899}\n  token-url: ${swagger.gateway}/auth/oauth/token\n  scope: server\n  services:\n    flycloud-gateway: flycloud-gateway\n    flycloud-system: flycloud-system\n    flycloud-mall: flycloud-mall\n', '366e8717b1b89bdb70f9b9c33139e765', '2023-04-19 04:56:09', '2023-04-19 04:56:09', 'nacos', '112.94.100.87', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (1, 21, 'common.yaml', 'DEFAULT_GROUP', '', '\n# spring配置\nspring:\n  # 文件上传\n  servlet:\n    multipart:\n      # 单个文件大小\n      max-file-size: 1000MB\n      # 设置总上传的文件大小\n      max-request-size: 5000MB\n  jackson:\n    # 日期格式化\n    date-format: yyyy-MM-dd HH:mm:ss\n    time-zone: GMT+8\n\n\n# springdoc配置\nspringdoc:\n  api-docs:\n    # 是否开启接口文档\n    enabled: true\n  swagger-ui:\n    # 持久化认证数据\n    persistAuthorization: true\n\n\n# swagger配置\nswagger:\n  info:\n    # 标题\n    title: \'标题：FlyCloud微服务管理系统_接口文档\'\n    # 描述\n    description: \'描述：微服务权限管理系统, 具体包括XXX,XXX模块...\'\n    # 版本\n    version: \'版本号：系统版本...\'\n    # 作者信息\n    contact:\n      name: Lxs \n      email: 2570078967@qq.com\n      url: https://github.com/15521142480/flycloud\n  components:\n    # 鉴权方式配置\n    security-schemes:\n      apiKey:\n        type: APIKEY\n        in: HEADER\n        #name: ${sa-token.token-name}\n        name: Authorization \n  # 服务文档路径映射 参考 gateway router 配置\n  # 默认为服务名去除前缀转换为path 此处填特殊的配置\n  service-mapping:\n    flycloud-gen: /code\n', '58ff12760fc2e794d1655298aee2d186', '2023-04-19 06:48:23', '2023-04-19 06:48:24', 'nacos', '116.21.159.246', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (1, 22, 'application-common.yaml', 'DEFAULT_GROUP', '', '\n# spring配置\nspring:\n  # 资源信息\n  messages:\n    # 国际化资源文件路径\n    basename: i18n/messages\n  servlet:\n    multipart:\n      # 单个文件大小\n      max-file-size: 1000MB\n      # 设置总上传的文件大小\n      max-request-size: 5000MB\n  mvc:\n    format:\n      date-time: yyyy-MM-dd HH:mm:ss\n  #jackson配置\n  jackson:\n    # 日期格式化\n    date-format: yyyy-MM-dd HH:mm:ss\n    time-zone: GMT+8\n    serialization:\n      # 格式化输出\n      INDENT_OUTPUT: false\n      # 忽略无法转换的对象\n      fail_on_empty_beans: false\n    deserialization:\n      # 允许对象忽略json中不存在的属性\n      fail_on_unknown_properties: false\n  cloud:\n    # sentinel 配置\n    sentinel:\n      # sentinel 开关\n      enabled: true\n      # 取消控制台懒加载\n      eager: true\n      transport:\n        # dashboard控制台服务名 用于服务发现\n        # 如无此配置将默认使用下方 dashboard 配置直接注册\n        server-name: ruoyi-sentinel-dashboard\n        # 客户端指定注册的ip 用于多网卡ip不稳点使用\n        # client-ip:\n        # 控制台地址 从1.3.0开始使用 server-name 注册\n        # dashboard: localhost:8718\n\n  # redis通用配置 子服务可以自行配置进行覆盖\n  redis:\n    host: 39.98.125.88\n    port: 6379\n    # 密码(如没有密码请注释掉)\n    # password:\n    database: 0\n    timeout: 10s\n    ssl: false\n\n\n# springdoc配置\nspringdoc:\n  api-docs:\n    # 是否开启接口文档\n    enabled: true\n  swagger-ui:\n    # 持久化认证数据\n    persistAuthorization: true\n\n\n# swagger配置\nswagger:\n  info:\n    # 标题\n    title: \'标题：FlyCloud微服务管理系统_接口文档\'\n    # 描述\n    description: \'描述：微服务权限管理系统, 具体包括XXX,XXX模块...\'\n    # 版本\n    version: \'版本号：系统版本...\'\n    # 作者信息\n    contact:\n      name: Lxs \n      email: 2570078967@qq.com\n      url: https://github.com/15521142480/flycloud\n  components:\n    # 鉴权方式配置\n    security-schemes:\n      apiKey:\n        type: APIKEY\n        in: HEADER\n        #name: ${sa-token.token-name}\n        name: Authorization \n  # 服务文档路径映射 参考 gateway router 配置\n  # 默认为服务名去除前缀转换为path 此处填特殊的配置\n  service-mapping:\n    flycloud-gen: /code\n', '03883b703a965d85b02e8b043303df99', '2023-04-19 06:50:03', '2023-04-19 06:50:03', 'nacos', '116.21.159.246', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (1, 23, 'application-common.yaml', 'DEFAULT_GROUP', '', '\n# spring配置\nspring:\n  # 资源信息\n  messages:\n    # 国际化资源文件路径\n    basename: i18n/messages\n  servlet:\n    multipart:\n      # 单个文件大小\n      max-file-size: 1000MB\n      # 设置总上传的文件大小\n      max-request-size: 5000MB\n  mvc:\n    format:\n      date-time: yyyy-MM-dd HH:mm:ss\n  #jackson配置\n  jackson:\n    # 日期格式化\n    date-format: yyyy-MM-dd HH:mm:ss\n    time-zone: GMT+8\n    serialization:\n      # 格式化输出\n      INDENT_OUTPUT: false\n      # 忽略无法转换的对象\n      fail_on_empty_beans: false\n    deserialization:\n      # 允许对象忽略json中不存在的属性\n      fail_on_unknown_properties: false\n  cloud:\n    # sentinel 配置\n    sentinel:\n      # sentinel 开关\n      enabled: true\n      # 取消控制台懒加载\n      eager: true\n      transport:\n        # dashboard控制台服务名 用于服务发现\n        # 如无此配置将默认使用下方 dashboard 配置直接注册\n        server-name: ruoyi-sentinel-dashboard\n        # 客户端指定注册的ip 用于多网卡ip不稳点使用\n        # client-ip:\n        # 控制台地址 从1.3.0开始使用 server-name 注册\n        # dashboard: localhost:8718\n\n  # redis通用配置 子服务可以自行配置进行覆盖\n  redis:\n    host: 39.98.125.88\n    port: 6379\n    # 密码(如没有密码请注释掉)\n    # password:\n    database: 0\n    timeout: 10s\n    ssl: false\n\n\n# springdoc配置\nspringdoc:\n  api-docs:\n    # 是否开启接口文档\n    enabled: true\n  swagger-ui:\n    # 持久化认证数据\n    persistAuthorization: true\n\n\n# swagger配置\nswagger:\n  info:\n    # 标题\n    title: \'标题：FlyCloud微服务管理系统_接口文档\'\n    # 描述\n    description: \'描述：微服务权限管理系统, 具体包括XXX,XXX模块...\'\n    # 版本\n    version: \'版本号：系统版本...\'\n    # 作者信息\n    contact:\n      name: Lxs \n      email: 2570078967@qq.com\n      url: https://github.com/15521142480/flycloud\n  components:\n    # 鉴权方式配置\n    security-schemes:\n      apiKey:\n        type: APIKEY\n        in: HEADER\n        #name: ${sa-token.token-name}\n        name: Authorization \n  # 服务文档路径映射 参考 gateway router 配置\n  # 默认为服务名去除前缀转换为path 此处填特殊的配置\n  service-mapping:\n    flycloud-gen: /code\n', '03883b703a965d85b02e8b043303df99', '2023-04-19 06:55:32', '2023-04-19 06:55:32', 'nacos', '116.21.159.246', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (1, 24, 'application-common.yaml', 'DEFAULT_GROUP', '', '\n# spring配置\nspring:\n  # 资源信息\n  messages:\n    # 国际化资源文件路径\n    basename: i18n/messages\n  servlet:\n    multipart:\n      # 单个文件大小\n      max-file-size: 1000MB\n      # 设置总上传的文件大小\n      max-request-size: 5000MB\n  mvc:\n    format:\n      date-time: yyyy-MM-dd HH:mm:ss\n  #jackson配置\n  jackson:\n    # 日期格式化\n    date-format: yyyy-MM-dd HH:mm:ss\n    time-zone: GMT+8\n    serialization:\n      # 格式化输出\n      INDENT_OUTPUT: false\n      # 忽略无法转换的对象\n      fail_on_empty_beans: false\n    deserialization:\n      # 允许对象忽略json中不存在的属性\n      fail_on_unknown_properties: false\n  cloud:\n    # sentinel 配置\n    sentinel:\n      # sentinel 开关\n      enabled: true\n      # 取消控制台懒加载\n      eager: true\n      transport:\n        # dashboard控制台服务名 用于服务发现\n        # 如无此配置将默认使用下方 dashboard 配置直接注册\n        server-name: ruoyi-sentinel-dashboard\n        # 客户端指定注册的ip 用于多网卡ip不稳点使用\n        # client-ip:\n        # 控制台地址 从1.3.0开始使用 server-name 注册\n        # dashboard: localhost:8718\n\n  # redis通用配置 子服务可以自行配置进行覆盖\n  redis:\n    host: 39.98.125.88\n    port: 6379\n    # 密码(如没有密码请注释掉)\n    # password:\n    database: 0\n    timeout: 10s\n    ssl: false\n\n\n# springdoc配置\nspringdoc:\n  api-docs:\n    # 是否开启接口文档\n    enabled: true\n  swagger-ui:\n    # 持久化认证数据\n    persistAuthorization: true\n\n\n# swagger配置\nswagger:\n  info:\n    # 标题\n    title: \'标题：FlyCloud微服务管理系统_接口文档\'\n    # 描述\n    description: \'描述：微服务权限管理系统, 具体包括XXX,XXX模块...\'\n    # 版本\n    version: \'版本号：系统版本...\'\n    # 作者信息\n    contact:\n      name: Lxs \n      email: 2570078967@qq.com\n      url: https://github.com/15521142480/flycloud\n  components:\n    # 鉴权方式配置\n    security-schemes:\n      apiKey:\n        type: APIKEY\n        in: HEADER\n        #name: ${sa-token.token-name}\n        name: Authorization \n  # 服务文档路径映射 参考 gateway router 配置\n  # 默认为服务名去除前缀转换为path 此处填特殊的配置\n  service-mapping:\n    flycloud-gen: /code\n\n\n# redisson 配置\nredisson:\n  # redis key前缀\n  keyPrefix:\n  # 线程池数量\n  threads: 4\n  # Netty线程池数量\n  nettyThreads: 8\n  # 单节点配置\n  singleServerConfig:\n    # 客户端名称\n    clientName: ${spring.application.name}\n    # 最小空闲连接数\n    connectionMinimumIdleSize: 8\n    # 连接池大小\n    connectionPoolSize: 32\n    # 连接空闲超时，单位：毫秒\n    idleConnectionTimeout: 10000\n    # 命令等待超时，单位：毫秒\n    timeout: 3000\n    # 发布和订阅连接池大小\n    subscriptionConnectionPoolSize: 50', 'bf9cbd4917e15c2815af9609947f16ba', '2023-04-19 07:32:44', '2023-04-19 07:32:45', 'nacos', '116.21.159.246', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (1, 25, 'application-common.yaml', 'DEFAULT_GROUP', '', '\n# spring配置\nspring:\n  # 资源信息\n  messages:\n    # 国际化资源文件路径\n    basename: i18n/messages\n  servlet:\n    multipart:\n      # 单个文件大小\n      max-file-size: 1000MB\n      # 设置总上传的文件大小\n      max-request-size: 5000MB\n  mvc:\n    format:\n      date-time: yyyy-MM-dd HH:mm:ss\n  #jackson配置\n  jackson:\n    # 日期格式化\n    date-format: yyyy-MM-dd HH:mm:ss\n    time-zone: GMT+8\n    serialization:\n      # 格式化输出\n      INDENT_OUTPUT: false\n      # 忽略无法转换的对象\n      fail_on_empty_beans: false\n    deserialization:\n      # 允许对象忽略json中不存在的属性\n      fail_on_unknown_properties: false\n  cloud:\n    # sentinel 配置\n    sentinel:\n      # sentinel 开关\n      enabled: true\n      # 取消控制台懒加载\n      eager: true\n      transport:\n        # dashboard控制台服务名 用于服务发现\n        # 如无此配置将默认使用下方 dashboard 配置直接注册\n        server-name: ruoyi-sentinel-dashboard\n        # 客户端指定注册的ip 用于多网卡ip不稳点使用\n        # client-ip:\n        # 控制台地址 从1.3.0开始使用 server-name 注册\n        # dashboard: localhost:8718\n\n  # redis通用配置 子服务可以自行配置进行覆盖\n  redis:\n    host: 39.98.125.88\n    port: 6379\n    # 密码(如没有密码请注释掉)\n    # password:\n    database: 0\n    timeout: 10s\n    ssl: false\n\n\n# springdoc配置\nspringdoc:\n  api-docs:\n    # 是否开启接口文档\n    enabled: true\n  swagger-ui:\n    # 持久化认证数据\n    persistAuthorization: true\n\n\n# swagger配置\nswagger:\n  # 是否开启接口文档\n  enabled: true\n  info:\n    # 标题\n    title: \'标题：FlyCloud微服务管理系统_接口文档\'\n    # 描述\n    description: \'描述：微服务权限管理系统, 具体包括XXX,XXX模块...\'\n    # 版本\n    version: \'版本号：系统版本...\'\n    # 作者信息\n    contact:\n      name: Lxs \n      email: 2570078967@qq.com\n      url: https://github.com/15521142480/flycloud\n  components:\n    # 鉴权方式配置\n    security-schemes:\n      apiKey:\n        type: APIKEY\n        in: HEADER\n        #name: ${sa-token.token-name}\n        name: Authorization \n  # 服务文档路径映射 参考 gateway router 配置\n  # 默认为服务名去除前缀转换为path 此处填特殊的配置\n  service-mapping:\n    flycloud-gen: /code\n\n\n# redisson 配置\nredisson:\n  # redis key前缀\n  keyPrefix:\n  # 线程池数量\n  threads: 4\n  # Netty线程池数量\n  nettyThreads: 8\n  # 单节点配置\n  singleServerConfig:\n    # 客户端名称\n    clientName: ${spring.application.name}\n    # 最小空闲连接数\n    connectionMinimumIdleSize: 8\n    # 连接池大小\n    connectionPoolSize: 32\n    # 连接空闲超时，单位：毫秒\n    idleConnectionTimeout: 10000\n    # 命令等待超时，单位：毫秒\n    timeout: 3000\n    # 发布和订阅连接池大小\n    subscriptionConnectionPoolSize: 50', 'd504178209f9c744638879f35ca99130', '2023-04-19 07:39:20', '2023-04-19 07:39:20', 'nacos', '116.21.159.246', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (10, 26, 'flycloud-gateway-dev.yaml', 'DEFAULT_GROUP', '', '\nspring:\n\n    gateway:\n      metrics:\n        enabled: true\n      discovery:\n        locator:\n          # 开启服务注册和发现\n          enabled: true\n          # 自动配置路由 (手动写路由的话, swagger整合不了)\n      routes:\n\n        # 固定路由转发配置 无修改\n        - id: openapi\n          uri: lb://flycloud-gateway\n          predicates:\n            - Path=/v3/api-docs/**\n          filters:\n            - RewritePath=/v3/api-docs/(?<path>.*), /$\\{path}/v3/api-docs\n\n        - id: flycloud-system     # 路由id，没有固定规则但要求唯一, 建议配合服务名\n          # uri: http://localhost:8001     # 匹配后提供服务的路由地址 (即类似nginx的代理地址)\n          uri: lb://flycloud-system\n          order: 1\n          predicates:\n            - Path=/flycloud-system/**      # 断言, 路径相匹配的进行路由; 服务一般不用设置servlet-context-path,因为直接让客户端请求带上此断言服务名字即可 (即类似nginx的断言)\n          # filters:\n            # - StripPrefix=1     # 去除第一个路径 (http://localhost:8001/aaa/order/orderInfo -> http://localhost:8001/order/orderInfo)\n            # - PrefixPath=/order     # 请求路径添加前缀 (http://localhost:8001/order/orderInfo -> http://localhost:8001/aaa/order/orderInfo)\n\n        - id: flycloud-mall\n          uri: lb://flycloud-mall\n          predicates:\n            - Path=/flycloud-mall/**\n\n\nlogging:\n  level:\n    org:\n      springframework:\n        cloud:\n          gateway: TRACE', '9d3c15242c3b173da191d5aa8ad96fb8', '2023-04-19 07:41:59', '2023-04-19 07:42:00', 'nacos', '116.21.159.246', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (1, 27, 'application-common.yaml', 'DEFAULT_GROUP', '', '\n# spring配置\nspring:\n  # 资源信息\n  messages:\n    # 国际化资源文件路径\n    basename: i18n/messages\n  servlet:\n    multipart:\n      # 单个文件大小\n      max-file-size: 1000MB\n      # 设置总上传的文件大小\n      max-request-size: 5000MB\n  mvc:\n    format:\n      date-time: yyyy-MM-dd HH:mm:ss\n  #jackson配置\n  jackson:\n    # 日期格式化\n    date-format: yyyy-MM-dd HH:mm:ss\n    time-zone: GMT+8\n    serialization:\n      # 格式化输出\n      INDENT_OUTPUT: false\n      # 忽略无法转换的对象\n      fail_on_empty_beans: false\n    deserialization:\n      # 允许对象忽略json中不存在的属性\n      fail_on_unknown_properties: false\n  cloud:\n    # sentinel 配置\n    sentinel:\n      # sentinel 开关\n      enabled: true\n      # 取消控制台懒加载\n      eager: true\n      transport:\n        # dashboard控制台服务名 用于服务发现\n        # 如无此配置将默认使用下方 dashboard 配置直接注册\n        server-name: ruoyi-sentinel-dashboard\n        # 客户端指定注册的ip 用于多网卡ip不稳点使用\n        # client-ip:\n        # 控制台地址 从1.3.0开始使用 server-name 注册\n        # dashboard: localhost:8718\n\n  # redis通用配置 子服务可以自行配置进行覆盖\n  redis:\n    host: 39.98.125.88\n    port: 6379\n    # 密码(如没有密码请注释掉)\n    # password:\n    database: 0\n    timeout: 10s\n    ssl: false\n\n\n# redisson 配置\nredisson:\n  # redis key前缀\n  keyPrefix:\n  # 线程池数量\n  threads: 4\n  # Netty线程池数量\n  nettyThreads: 8\n  # 单节点配置\n  singleServerConfig:\n    # 客户端名称\n    clientName: ${spring.application.name}\n    # 最小空闲连接数\n    connectionMinimumIdleSize: 8\n    # 连接池大小\n    connectionPoolSize: 32\n    # 连接空闲超时，单位：毫秒\n    idleConnectionTimeout: 10000\n    # 命令等待超时，单位：毫秒\n    timeout: 3000\n    # 发布和订阅连接池大小\n    subscriptionConnectionPoolSize: 50\n    \n\n# springdoc配置\nspringdoc:\n  api-docs:\n    # 是否开启接口文档\n    enabled: true\n  swagger-ui:\n    # 持久化认证数据\n    persistAuthorization: true\n\n\n# swagger配置\nswagger:\n  # 是否开启接口文档\n  enabled: true\n  info:\n    # 标题\n    title: \'标题：FlyCloud微服务管理系统_接口文档\'\n    # 描述\n    description: \'描述：微服务权限管理系统, 具体包括XXX,XXX模块...\'\n    # 版本\n    version: \'版本号：系统版本...\'\n    # 作者信息\n    contact:\n      name: Lxs \n      email: 2570078967@qq.com\n      url: https://github.com/15521142480/flycloud\n  components:\n    # 鉴权方式配置\n    security-schemes:\n      apiKey:\n        type: APIKEY\n        in: HEADER\n        #name: ${sa-token.token-name}\n        name: Authorization \n  # 服务文档路径映射 参考 gateway router 配置\n  # 默认为服务名去除前缀转换为path 此处填特殊的配置\n  service-mapping:\n    flycloud-gen: /code\n\n', 'a83dde53f9f7e8423b7d127fc43afa3a', '2023-04-19 08:09:08', '2023-04-19 08:09:08', 'nacos', '116.21.159.246', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (1, 28, 'application-common.yaml', 'DEFAULT_GROUP', '', '\n# spring配置\nspring:\n  # 资源信息\n  messages:\n    # 国际化资源文件路径\n    basename: i18n/messages\n  servlet:\n    multipart:\n      # 单个文件大小\n      max-file-size: 1000MB\n      # 设置总上传的文件大小\n      max-request-size: 5000MB\n  mvc:\n    format:\n      date-time: yyyy-MM-dd HH:mm:ss\n  #jackson配置\n  jackson:\n    # 日期格式化\n    date-format: yyyy-MM-dd HH:mm:ss\n    time-zone: GMT+8\n    serialization:\n      # 格式化输出\n      INDENT_OUTPUT: false\n      # 忽略无法转换的对象\n      fail_on_empty_beans: false\n    deserialization:\n      # 允许对象忽略json中不存在的属性\n      fail_on_unknown_properties: false\n  cloud:\n    # sentinel 配置\n    # sentinel:\n    #   # sentinel 开关\n    #   enabled: true\n    #   # 取消控制台懒加载\n    #   eager: true\n    #   transport:\n    #     # dashboard控制台服务名 用于服务发现\n    #     # 如无此配置将默认使用下方 dashboard 配置直接注册\n    #     server-name: ruoyi-sentinel-dashboard\n    #     # 客户端指定注册的ip 用于多网卡ip不稳点使用\n    #     # client-ip:\n    #     # 控制台地址 从1.3.0开始使用 server-name 注册\n    #     # dashboard: localhost:8718\n\n  # redis通用配置 子服务可以自行配置进行覆盖\n  # redis:\n  #   host: 39.98.125.88\n  #   port: 6379\n  #   # 密码(如没有密码请注释掉)\n  #   # password:\n  #   database: 0\n  #   timeout: 10s\n  #   ssl: false\n\n\n# redisson 配置\n# redisson:\n#   # redis key前缀\n#   keyPrefix:\n#   # 线程池数量\n#   threads: 4\n#   # Netty线程池数量\n#   nettyThreads: 8\n#   # 单节点配置\n#   singleServerConfig:\n#     # 客户端名称\n#     clientName: ${spring.application.name}\n#     # 最小空闲连接数\n#     connectionMinimumIdleSize: 8\n#     # 连接池大小\n#     connectionPoolSize: 32\n#     # 连接空闲超时，单位：毫秒\n#     idleConnectionTimeout: 10000\n#     # 命令等待超时，单位：毫秒\n#     timeout: 3000\n#     # 发布和订阅连接池大小\n#     subscriptionConnectionPoolSize: 50\n    \n\n# springdoc配置\nspringdoc:\n  api-docs:\n    # 是否开启接口文档\n    enabled: true\n  swagger-ui:\n    # 持久化认证数据\n    persistAuthorization: true\n\n\n# swagger配置\nswagger:\n  # 是否开启接口文档\n  enabled: true\n  info:\n    # 标题\n    title: \'标题：FlyCloud微服务管理系统_接口文档\'\n    # 描述\n    description: \'描述：微服务权限管理系统, 具体包括XXX,XXX模块...\'\n    # 版本\n    version: \'版本号：系统版本...\'\n    # 作者信息\n    contact:\n      name: Lxs \n      email: 2570078967@qq.com\n      url: https://github.com/15521142480/flycloud\n  components:\n    # 鉴权方式配置\n    security-schemes:\n      apiKey:\n        type: APIKEY\n        in: HEADER\n        #name: ${sa-token.token-name}\n        name: Authorization \n  # 服务文档路径映射 参考 gateway router 配置\n  # 默认为服务名去除前缀转换为path 此处填特殊的配置\n  service-mapping:\n    flycloud-gen: /code\n\n', 'f65d06d4b254b2af4cb0879babaf89d1', '2023-04-19 08:35:48', '2023-04-19 08:35:48', 'nacos', '120.85.112.10', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (4, 29, 'mall4cloud-gateway.yml', 'DEFAULT_GROUP', '', 'spring:\n  cloud:\n    gateway:\n      discovery:\n        locator:\n          enabled: true\n      routes:\n        - id: mall4cloud-rbac\n          uri: lb://mall4cloud-rbac\n          predicates:\n            - Path=/mall4cloud_rbac/**\n          filters:\n            - RewritePath=/mall4cloud_rbac(?<segment>/?.*), $\\{segment}\n     ', '67fb0e03d4c442e01eeab754e7578373', '2023-04-19 12:06:08', '2023-04-19 12:06:08', NULL, '120.85.112.10', 'D', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (10, 30, 'flycloud-gateway-dev.yaml', 'DEFAULT_GROUP', '', '\nspring:\n  cloud:\n    # 网关配置\n    gateway:\n      metrics:\n        enabled: true\n      # 打印请求日志(自定义)\n      requestLog: true\n      discovery:\n        locator:\n          # 开启服务注册和发现\n          enabled: true\n          # 自动配置路由 (手动写路由的话, swagger整合不了)\n      routes:\n\n        # 固定路由转发配置 无修改\n        - id: openapi\n          uri: lb://flycloud-gateway\n          predicates:\n            - Path=/v3/api-docs/**\n          filters:\n            - RewritePath=/v3/api-docs/(?<path>.*), /$\\{path}/v3/api-docs\n\n        - id: flycloud-system     # 路由id，没有固定规则但要求唯一, 建议配合服务名\n          # uri: http://localhost:8001     # 匹配后提供服务的路由地址 (即类似nginx的代理地址)\n          uri: lb://flycloud-system\n          order: 1\n          predicates:\n            - Path=/flycloud-system/**      # 断言, 路径相匹配的进行路由; 服务一般不用设置servlet-context-path,因为直接让客户端请求带上此断言服务名字即可 (即类似nginx的断言)\n          # filters:\n            # - StripPrefix=1     # 去除第一个路径 (http://localhost:8001/aaa/order/orderInfo -> http://localhost:8001/order/orderInfo)\n            # - PrefixPath=/order     # 请求路径添加前缀 (http://localhost:8001/order/orderInfo -> http://localhost:8001/aaa/order/orderInfo)\n\n        - id: flycloud-mall\n          uri: lb://flycloud-mall\n          predicates:\n            - Path=/flycloud-mall/**\n\n\nlogging:\n  level:\n    org:\n      springframework:\n        cloud:\n          gateway: TRACE', 'aeab7c032993c2449dbc9ad41464cf24', '2023-04-19 15:24:11', '2023-04-19 15:24:12', 'nacos', '116.21.159.246', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (2, 31, 'datasource.yaml', 'DEFAULT_GROUP', '', 'spring:\n  redis:\n    database: 2\n    host: localhost\n    port: 6379\n    #password:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://localhost:3306/maku_cloud?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&nullCatalogMeansCurrent=true\n    username: maku\n    password: 123456\n    # driver-class-name: dm.jdbc.driver.DmDriver\n    # url: jdbc:dm://192.168.3.19:5236/maku_cloud?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&nullCatalogMeansCurrent=true\n    # username: maku_cloud\n    # password: 12345678\n    # driver-class-name: org.postgresql.Driver\n    # url: jdbc:postgresql://192.168.3.19:5432/postgres\n    # username: postgres\n    # password: 123456\n    hikari:\n      connection-timeout: 30000\n      minimum-idle: 5\n      maximum-pool-size: 5\n      auto-commit: true\n      idle-timeout: 600000\n      max-lifetime: 1800000\n      connection-test-query: SELECT 1\n\nmybatis-plus:\n  mapper-locations: classpath*:/mapper/**/*.xml\n  # 实体扫描，多个package用逗号或者分号分隔\n  typeAliasesPackage: net.maku.*.entity\n  global-config:\n    # 数据库相关配置\n    db-config:\n      # ID自增\n      id-type: AUTO\n      # 逻辑已删除值\n      logic-delete-value: 1\n      # 逻辑未删除值\n      logic-not-delete-value: 0\n    banner: false\n  # 原生配置\n  configuration:\n    map-underscore-to-camel-case: true\n    cache-enabled: false\n    call-setters-on-nulls: true\n    jdbc-type-for-null: \"null\"\n  configuration-properties:\n    prefix:\n    blobType: BLOB\n    boolValue: TRUE\n', '99fc38e4fb785456e98d63860cf03e1e', '2023-04-20 01:02:17', '2023-04-20 01:02:18', NULL, '120.85.115.246', 'D', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (0, 32, 'application-datasource.yaml', 'DEFAULT_GROUP', '', '\n# 数据源连接 配置\ndatasource:\n\n  # 系统模块的-主库数据源 (根据需求配置-从库数据源)\n  system-master:\n    # jdbc 所有参数配置参考 https://lionli.blog.csdn.net/article/details/122018562\n    # rewriteBatchedStatements=true 批处理优化 大幅提升批量插入更新删除性能\n    url: jdbc:mysql://localhost:3306/ry-cloud?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: password\n  # system-slave:\n\n  # 商城模块的-主库数据源\n  mall-master:\n    url: jdbc:mysql://localhost:3306/ry-cloud?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: password\n\n  # 音乐模块的-主库数据源\n  mall-master:\n    url: jdbc:mysql://localhost:3306/ry-cloud?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: password\n\n  system-master:\n    # jdbc 所有参数配置参考 https://lionli.blog.csdn.net/article/details/122018562\n    # rewriteBatchedStatements=true 批处理优化 大幅提升批量插入更新删除性能\n    url: jdbc:mysql://localhost:3306/ry-cloud?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: password\n\n  # 自动生成数据库说明: 由于要自动生成某个数据库的表信息, 所以只需要指向你要生成的已经在使用的数据库即可\n  gen:\n    url: jdbc:mysql://localhost:3306/ry-cloud?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: password\n\n  # 定时任务数据库\n  job:\n    url: jdbc:mysql://localhost:3306/ry-job?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: password\n\n#  其他数据库系统\n#  system-oracle:\n#    url: jdbc:oracle:thin:@//localhost:1521/XE\n#    username: ROOT\n#    password: password\n\n#  system-postgres:\n#    url: jdbc:postgresql://localhost:5432/postgres?useUnicode=true&characterEncoding=utf8&useSSL=true&autoReconnect=true&reWriteBatchedInserts=true\n#    username: root\n#    password: password\n\n\n# 数据源属性 配置\nspring:\n  datasource:\n    type: com.zaxxer.hikari.HikariDataSource\n    # 动态数据源文档 https://www.kancloud.cn/tracy5546/dynamic-datasource/content\n    dynamic:\n      # 性能分析插件(有性能损耗 不建议生产环境使用)\n      p6spy: true\n      # 开启seata代理，开启后默认每个数据源都代理，如果某个不需要代理可单独关闭\n      seata: true\n      # 严格模式 匹配不到数据源则报错\n      strict: true\n      hikari:\n        # 最大连接池数量\n        maxPoolSize: 20\n        # 最小空闲线程数量\n        minIdle: 10\n        # 配置获取连接等待超时的时间\n        connectionTimeout: 30000\n        # 校验超时时间\n        validationTimeout: 5000\n        # 空闲连接存活最大时间，默认10分钟\n        idleTimeout: 600000\n        # 此属性控制池中连接的最长生命周期，值0表示无限生命周期，默认30分钟\n        maxLifetime: 1800000\n        # 连接测试query（配置检测连接是否有效）\n        connectionTestQuery: SELECT 1\n        # 多久检查一次连接的活性\n        keepaliveTime: 30000\n\n\n# seata配置\nseata:\n  # 关闭自动代理\n  enable-auto-data-source-proxy: false\n', 'b01a5d0b39baf7ac2fb572d5ccb20873', '2023-04-20 01:20:39', '2023-04-20 01:20:39', NULL, '120.85.113.84', 'I', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (29, 33, 'application-datasource.yaml', 'DEFAULT_GROUP', '', '\n# 数据源连接 配置\ndatasource:\n\n  # 系统模块的-主库数据源 (根据需求配置-从库数据源)\n  system-master:\n    # jdbc 所有参数配置参考 https://lionli.blog.csdn.net/article/details/122018562\n    # rewriteBatchedStatements=true 批处理优化 大幅提升批量插入更新删除性能\n    url: jdbc:mysql://localhost:3306/ry-cloud?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: password\n  # system-slave:\n\n  # 商城模块的-主库数据源\n  mall-master:\n    url: jdbc:mysql://localhost:3306/ry-cloud?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: password\n\n  # 音乐模块的-主库数据源\n  mall-master:\n    url: jdbc:mysql://localhost:3306/ry-cloud?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: password\n\n  system-master:\n    # jdbc 所有参数配置参考 https://lionli.blog.csdn.net/article/details/122018562\n    # rewriteBatchedStatements=true 批处理优化 大幅提升批量插入更新删除性能\n    url: jdbc:mysql://localhost:3306/ry-cloud?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: password\n\n  # 自动生成数据库说明: 由于要自动生成某个数据库的表信息, 所以只需要指向你要生成的已经在使用的数据库即可\n  gen:\n    url: jdbc:mysql://localhost:3306/ry-cloud?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: password\n\n  # 定时任务数据库\n  job:\n    url: jdbc:mysql://localhost:3306/ry-job?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: password\n\n#  其他数据库系统\n#  system-oracle:\n#    url: jdbc:oracle:thin:@//localhost:1521/XE\n#    username: ROOT\n#    password: password\n\n#  system-postgres:\n#    url: jdbc:postgresql://localhost:5432/postgres?useUnicode=true&characterEncoding=utf8&useSSL=true&autoReconnect=true&reWriteBatchedInserts=true\n#    username: root\n#    password: password\n\n\n# 数据源属性 配置\nspring:\n  datasource:\n    type: com.zaxxer.hikari.HikariDataSource\n    # 动态数据源文档 https://www.kancloud.cn/tracy5546/dynamic-datasource/content\n    dynamic:\n      # 性能分析插件(有性能损耗 不建议生产环境使用)\n      p6spy: true\n      # 开启seata代理，开启后默认每个数据源都代理，如果某个不需要代理可单独关闭\n      seata: true\n      # 严格模式 匹配不到数据源则报错\n      strict: true\n      hikari:\n        # 最大连接池数量\n        maxPoolSize: 20\n        # 最小空闲线程数量\n        minIdle: 10\n        # 配置获取连接等待超时的时间\n        connectionTimeout: 30000\n        # 校验超时时间\n        validationTimeout: 5000\n        # 空闲连接存活最大时间，默认10分钟\n        idleTimeout: 600000\n        # 此属性控制池中连接的最长生命周期，值0表示无限生命周期，默认30分钟\n        maxLifetime: 1800000\n        # 连接测试query（配置检测连接是否有效）\n        connectionTestQuery: SELECT 1\n        # 多久检查一次连接的活性\n        keepaliveTime: 30000\n\n\n# seata配置\nseata:\n  # 关闭自动代理\n  enable-auto-data-source-proxy: false\n', 'b01a5d0b39baf7ac2fb572d5ccb20873', '2023-04-20 01:21:34', '2023-04-20 01:21:35', 'nacos', '120.85.113.84', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (3, 34, 'flycloud-system-dev.yaml', 'DEFAULT_GROUP', '', 'sys:\n  name: IamSystem\n\n\nspring:\n\n# 数据源 配置\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://localhost:3306/mall?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&nullCatalogMeansCurrent=true\n    username: root\n    password: 123456\n\n\n# mybatis-plus 配置\nmybatis-plus:\n  # 对应的 XML 文件位置\n  mapperLocations: classpath*:mapper/**/*Mapper.xml\n  # 实体扫描，多个package用逗号或者分号分隔\n  typeAliasesPackage: com.fly.**.domain\n  global-config:\n    # 关闭MP3.0自带的banner\n    banner: false\n    db-config:\n      # 主键类型 0:数据库ID自增 1.未定义 2.用户输入 3 id_worker 4.uuid 5.id_worker字符串表示\n      id-type: 0\n      #字段策略 0:\"忽略判断\",1:\"非 NULL 判断\"),2:\"非空判断\"\n      field-strategy: 1\n      # 默认数据库表下划线命名\n      table-underline: true\n      # 逻辑删除配置\n      # 逻辑删除全局值（1表示已删除，这也是Mybatis Plus的默认配置）\n      logic-delete-value: 1\n      # 逻辑未删除全局值（0表示未删除，这也是Mybatis Plus的默认配置）\n      logic-not-delete-value: 0\n  configuration:\n    map-underscore-to-camel-case: true\n', '2083f8bc4f8e599bd93f4c99665ab436', '2023-04-20 01:24:37', '2023-04-20 01:24:37', NULL, '61.242.49.214', 'D', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (29, 35, 'application-datasource.yaml', 'DEFAULT_GROUP', '', '\n# 数据源连接 配置\ndatasource:\n\n  # 系统模块的-主库数据源 (根据需求配置-从库数据源)\n  system-master:\n    # jdbc 所有参数配置参考 https://lionli.blog.csdn.net/article/details/122018562\n    # rewriteBatchedStatements=true 批处理优化 大幅提升批量插入更新删除性能\n    url: jdbc:mysql://localhost:3306/ry-cloud?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: password\n  # system-slave:\n\n  # 商城模块的-主库数据源\n  mall-master:\n    url: jdbc:mysql://localhost:3306/ry-cloud?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: password\n\n  # 音乐模块的-主库数据源\n  mall-master:\n    url: jdbc:mysql://localhost:3306/ry-cloud?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: password\n\n  # 定时任务数据库\n  job:\n    url: jdbc:mysql://localhost:3306/ry-job?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: password\n\n  # 自动生成数据库说明: 由于要自动生成某个数据库的表信息, 所以只需要指向你要生成的已经在使用的数据库即可\n  gen:\n    url: jdbc:mysql://localhost:3306/ry-cloud?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: password\n    \n#  其他数据库系统\n#  system-oracle:\n#    url: jdbc:oracle:thin:@//localhost:1521/XE\n#    username: ROOT\n#    password: password\n\n#  system-postgres:\n#    url: jdbc:postgresql://localhost:5432/postgres?useUnicode=true&characterEncoding=utf8&useSSL=true&autoReconnect=true&reWriteBatchedInserts=true\n#    username: root\n#    password: password\n\n\n# 数据源属性 配置\nspring:\n  datasource:\n    type: com.zaxxer.hikari.HikariDataSource\n    # 动态数据源文档 https://www.kancloud.cn/tracy5546/dynamic-datasource/content\n    dynamic:\n      # 性能分析插件(有性能损耗 不建议生产环境使用)\n      p6spy: true\n      # 开启seata代理，开启后默认每个数据源都代理，如果某个不需要代理可单独关闭\n      seata: true\n      # 严格模式 匹配不到数据源则报错\n      strict: true\n      hikari:\n        # 最大连接池数量\n        maxPoolSize: 20\n        # 最小空闲线程数量\n        minIdle: 10\n        # 配置获取连接等待超时的时间\n        connectionTimeout: 30000\n        # 校验超时时间\n        validationTimeout: 5000\n        # 空闲连接存活最大时间，默认10分钟\n        idleTimeout: 600000\n        # 此属性控制池中连接的最长生命周期，值0表示无限生命周期，默认30分钟\n        maxLifetime: 1800000\n        # 连接测试query（配置检测连接是否有效）\n        connectionTestQuery: SELECT 1\n        # 多久检查一次连接的活性\n        keepaliveTime: 30000\n\n\n# seata配置\nseata:\n  # 关闭自动代理\n  enable-auto-data-source-proxy: false\n', 'b107635b4498592bff41f4b2579e8c53', '2023-04-20 01:24:47', '2023-04-20 01:24:47', 'nacos', '61.242.49.214', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (29, 36, 'application-datasource.yaml', 'DEFAULT_GROUP', '', '\n# 数据源连接 配置\ndatasource:\n\n  # 系统模块的-主库数据源 (根据需求配置-从库数据源)\n  system-master:\n    # jdbc 所有参数配置参考 https://lionli.blog.csdn.net/article/details/122018562\n    # rewriteBatchedStatements=true 批处理优化 大幅提升批量插入更新删除性能\n    url: jdbc:mysql://localhost:3306/ry-cloud?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: password\n  # system-slave:\n\n  # 商城模块的-主库数据源\n  mall-master:\n    url: jdbc:mysql://localhost:3306/ry-cloud?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: password\n\n  # 音乐模块的-主库数据源\n  mall-master:\n    url: jdbc:mysql://localhost:3306/ry-cloud?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: password\n\n  # 定时任务数据库\n  job:\n    url: jdbc:mysql://localhost:3306/ry-job?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: password\n\n  # 自动生成数据库说明: 由于要自动生成某个数据库的表信息, 所以只需要指向你要生成的已经在使用的数据库即可\n  gen:\n    url: jdbc:mysql://localhost:3306/ry-cloud?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: password\n    \n#  其他数据库系统\n#  system-oracle:\n#    url: jdbc:oracle:thin:@//localhost:1521/XE\n#    username: ROOT\n#    password: password\n\n#  system-postgres:\n#    url: jdbc:postgresql://localhost:5432/postgres?useUnicode=true&characterEncoding=utf8&useSSL=true&autoReconnect=true&reWriteBatchedInserts=true\n#    username: root\n#    password: password\n\n\n# 数据源属性 配置\nspring:\n  datasource:\n    type: com.zaxxer.hikari.HikariDataSource\n    # 动态数据源文档 https://www.kancloud.cn/tracy5546/dynamic-datasource/content\n    dynamic:\n      # 性能分析插件(有性能损耗 不建议生产环境使用)\n      p6spy: true\n      # 开启seata代理，开启后默认每个数据源都代理，如果某个不需要代理可单独关闭\n      seata: true\n      # 严格模式 匹配不到数据源则报错\n      strict: true\n      hikari:\n        # 最大连接池数量\n        maxPoolSize: 20\n        # 最小空闲线程数量\n        minIdle: 10\n        # 配置获取连接等待超时的时间\n        connectionTimeout: 30000\n        # 校验超时时间\n        validationTimeout: 5000\n        # 空闲连接存活最大时间，默认10分钟\n        idleTimeout: 600000\n        # 此属性控制池中连接的最长生命周期，值0表示无限生命周期，默认30分钟\n        maxLifetime: 1800000\n        # 连接测试query（配置检测连接是否有效）\n        connectionTestQuery: SELECT 1\n        # 多久检查一次连接的活性\n        keepaliveTime: 30000\n\n\n# seata配置\nseata:\n  # 关闭自动代理\n  enable-auto-data-source-proxy: false\n', 'b107635b4498592bff41f4b2579e8c53', '2023-04-20 01:28:40', '2023-04-20 01:28:40', 'nacos', '112.94.103.26', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (0, 37, 'flycloud-system-dev.yaml', 'DEFAULT_GROUP', '', '\nspring:\n  datasource:\n    dynamic:\n      # 设置默认的数据源或者数据源组,默认值即为 master\n      primary: master\n      datasource:\n        # 主库数据源\n        master:\n          type: ${spring.datasource.type}\n          driver-class-name: com.mysql.cj.jdbc.Driver\n          url: ${datasource.system-master.url}\n          username: ${datasource.system-master.username}\n          password: ${datasource.system-master.password}\n\n\n#       其他数据库系统-参数说明 (主要是 driver-class-name):          \n#        oracle:\n#          type: ${spring.datasource.type}\n#          driverClassName: oracle.jdbc.OracleDriver\n#          url: ${datasource.system-oracle.url}\n#          username: ${datasource.system-oracle.username}\n#          password: ${datasource.system-oracle.password}\n#          hikari:\n#            connectionTestQuery: SELECT 1 FROM DUAL\n\n#        postgres:\n#          type: ${spring.datasource.type}\n#          driverClassName: org.postgresql.Driver\n#          url: ${datasource.system-postgres.url}\n#          username: ${datasource.system-postgres.username}\n#          password: ${datasource.system-postgres.password}\n', '2fcf60b0f97f7079543a1e2a83f32d52', '2023-04-20 01:31:21', '2023-04-20 01:31:21', NULL, '120.85.115.230', 'I', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (29, 38, 'application-datasource.yaml', 'DEFAULT_GROUP', '', '\n# 数据源连接 配置\ndatasource:\n\n  # 系统模块的-主库数据源 (根据需求配置-从库数据源)\n  system-master:\n    # jdbc 所有参数配置参考 https://lionli.blog.csdn.net/article/details/122018562\n    # rewriteBatchedStatements=true 批处理优化 大幅提升批量插入更新删除性能\n    url: jdbc:mysql://localhost:3306/fly-cloud?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: 123456\n  # system-slave:\n\n  # 商城模块的-主库数据源\n  mall-master:\n    url: jdbc:mysql://localhost:3306/fly-mall?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: 123456\n\n  # 音乐模块的-主库数据源\n  mall-master:\n    url: jdbc:mysql://localhost:3306/fly-music?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: 123456\n\n  # 定时任务数据库\n  job:\n    url: jdbc:mysql://localhost:3306/fly-job?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: 123456\n\n  # 自动生成数据库说明: 由于要自动生成某个数据库的表信息, 所以只需要指向你要生成的已经在使用的数据库即可\n  gen:\n    url: jdbc:mysql://localhost:3306/fly-cloud?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: 123456\n    \n#  其他数据库系统说明\n#  system-oracle:\n#    url: jdbc:oracle:thin:@//localhost:1521/XE\n#    username: ROOT\n#    password: password\n\n#  system-postgres:\n#    url: jdbc:postgresql://localhost:5432/postgres?useUnicode=true&characterEncoding=utf8&useSSL=true&autoReconnect=true&reWriteBatchedInserts=true\n#    username: root\n#    password: password\n\n\n# 数据源属性 配置\nspring:\n  datasource:\n    type: com.zaxxer.hikari.HikariDataSource\n    # 动态数据源文档 https://www.kancloud.cn/tracy5546/dynamic-datasource/content\n    dynamic:\n      # 性能分析插件(有性能损耗 不建议生产环境使用)\n      p6spy: true\n      # 开启seata代理，开启后默认每个数据源都代理，如果某个不需要代理可单独关闭\n      seata: true\n      # 严格模式 匹配不到数据源则报错\n      strict: true\n      hikari:\n        # 最大连接池数量\n        maxPoolSize: 20\n        # 最小空闲线程数量\n        minIdle: 10\n        # 配置获取连接等待超时的时间\n        connectionTimeout: 30000\n        # 校验超时时间\n        validationTimeout: 5000\n        # 空闲连接存活最大时间，默认10分钟\n        idleTimeout: 600000\n        # 此属性控制池中连接的最长生命周期，值0表示无限生命周期，默认30分钟\n        maxLifetime: 1800000\n        # 连接测试query（配置检测连接是否有效）\n        connectionTestQuery: SELECT 1\n        # 多久检查一次连接的活性\n        keepaliveTime: 30000\n\n\n# seata配置\nseata:\n  # 关闭自动代理\n  enable-auto-data-source-proxy: false\n', '9c3ad746f3ee89e858f0f95cf9a8be37', '2023-04-20 01:55:31', '2023-04-20 01:55:32', 'nacos', '120.85.112.10', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (29, 39, 'application-datasource.yaml', 'DEFAULT_GROUP', '', '\n# 数据源连接 配置\ndatasource:\n\n  # 系统模块的-主库数据源 (根据需求配置-从库数据源)\n  system-master:\n    # jdbc 所有参数配置参考 https://lionli.blog.csdn.net/article/details/122018562\n    # rewriteBatchedStatements=true 批处理优化 大幅提升批量插入更新删除性能\n    url: jdbc:mysql://localhost:3306/fly-cloud?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: 123456\n  # system-slave:\n\n  # 商城模块的-主库数据源\n  mall-master:\n    url: jdbc:mysql://localhost:3306/fly-mall?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: 123456\n\n  # 音乐模块的-主库数据源\n  mall-master:\n    url: jdbc:mysql://localhost:3306/fly-music?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: 123456\n\n  # 定时任务数据库\n  job:\n    url: jdbc:mysql://localhost:3306/fly-job?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: 123456\n\n  # 自动生成数据库说明: 由于要自动生成某个数据库的表信息, 所以只需要指向你要生成的已经在使用的数据库即可\n  gen:\n    url: jdbc:mysql://localhost:3306/fly-cloud?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: 123456\n    \n#  其他数据库系统说明\n#  system-oracle:\n#    url: jdbc:oracle:thin:@//localhost:1521/XE\n#    username: ROOT\n#    password: password\n\n#  system-postgres:\n#    url: jdbc:postgresql://localhost:5432/postgres?useUnicode=true&characterEncoding=utf8&useSSL=true&autoReconnect=true&reWriteBatchedInserts=true\n#    username: root\n#    password: password\n\n\n# 数据源属性 配置\nspring:\n  datasource:\n    type: com.zaxxer.hikari.HikariDataSource\n    # 动态数据源文档 https://www.kancloud.cn/tracy5546/dynamic-datasource/content\n    dynamic:\n      # 性能分析插件(有性能损耗 不建议生产环境使用)\n      p6spy: true\n      # 开启seata代理，开启后默认每个数据源都代理，如果某个不需要代理可单独关闭\n      seata: true\n      # 严格模式 匹配不到数据源则报错\n      strict: true\n      hikari:\n        # 最大连接池数量\n        maxPoolSize: 20\n        # 最小空闲线程数量\n        minIdle: 10\n        # 配置获取连接等待超时的时间\n        connectionTimeout: 30000\n        # 校验超时时间\n        validationTimeout: 5000\n        # 空闲连接存活最大时间，默认10分钟\n        idleTimeout: 600000\n        # 此属性控制池中连接的最长生命周期，值0表示无限生命周期，默认30分钟\n        maxLifetime: 1800000\n        # 连接测试query（配置检测连接是否有效）\n        connectionTestQuery: SELECT 1\n        # 多久检查一次连接的活性\n        keepaliveTime: 30000\n\n\n# seata配置\nseata:\n  # 关闭自动代理\n  enable-auto-data-source-proxy: false\n\n\n# MyBatisPlus配置  (https://baomidou.com/config/)\nmybatis-plus:\n  # 扫描mapper接口包有两种:\n  # todo 法1: 默认扫描(也就是加注解), 由于Springboot默认是在主类(@SpringBootApplication)所在的包名下扫描并注册bean, 即在mapper接口层加上注解@Mapper即可\n  # todo 法2: 手动扫描, 在相关启动配置类(如MybatisPlusConfig)加上@MapperScan(\"${mybatis-plus.mapperPackage}\" 即可\n  # 本项目用的是 法2 (因为基本上整个项目的包名前缀都是一样的,除非要注入第三方的bean); 如有需要支持多包可在注解配置 或 提升扫包等级 (例如 com.**.**.mapper)\n  mapperPackage: com.fly.**.mapper\n  # 对应的 XML 文件位置\n  mapperLocations: classpath*:mapper/**/*Mapper.xml\n  # 实体扫描，多个package用逗号或者分号分隔\n  typeAliasesPackage: com.fly.**.domain\n  # 启动时是否检查 MyBatis XML 文件的存在，默认不检查\n  checkConfigLocation: false\n  configuration:\n    # 自动驼峰命名规则（camel case）映射\n    mapUnderscoreToCamelCase: true\n    # MyBatis 自动映射策略\n    # NONE：不启用 PARTIAL：只对非嵌套 resultMap 自动映射 FULL：对所有 resultMap 自动映射\n    autoMappingBehavior: PARTIAL\n    # MyBatis 自动映射时未知列或未知属性处理策\n    # NONE：不做处理 WARNING：打印相关警告 FAILING：抛出异常和详细信息\n    autoMappingUnknownColumnBehavior: NONE\n    # 更详细的日志输出 会有性能损耗 org.apache.ibatis.logging.stdout.StdOutImpl\n    # 关闭日志记录 (可单纯使用 p6spy 分析) org.apache.ibatis.logging.nologging.NoLoggingImpl\n    # 默认日志输出 org.apache.ibatis.logging.slf4j.Slf4jImpl\n    logImpl: org.apache.ibatis.logging.nologging.NoLoggingImpl\n  global-config:\n    # 是否打印 Logo banner\n    banner: true\n    dbConfig:\n      # 主键类型\n      # AUTO 自增 NONE 空 INPUT 用户输入 ASSIGN_ID 雪花 ASSIGN_UUID 唯一 UUID\n      idType: ASSIGN_ID\n      # 逻辑已删除值\n      logicDeleteValue: 2\n      # 逻辑未删除值\n      logicNotDeleteValue: 0\n      insertStrategy: NOT_NULL\n      updateStrategy: NOT_NULL\n      where-strategy: NOT_NULL\n\n\n# 数据加密\nmybatis-encryptor:\n  # 是否开启加密\n  enable: false\n  # 默认加密算法\n  algorithm: BASE64\n  # 编码方式 BASE64/HEX。默认BASE64\n  encode: BASE64\n  # 安全秘钥 对称算法的秘钥 如：AES，SM4\n  password:\n  # 公私钥 非对称算法的公私钥 如：SM2，RSA\n  publicKey:\n  privateKey:', '3a11fc68a74c613208f8791c8cf41830', '2023-04-20 01:56:38', '2023-04-20 01:56:38', 'nacos', '116.21.159.246', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (0, 40, 'flycloud-gen-dev.yaml', 'DEFAULT_GROUP', '', '\nspring:\n  datasource:\n    type: ${spring.datasource.type}\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: ${datasource.gen.url}\n    username: ${datasource.gen.username}\n    password: ${datasource.gen.password}\n\n#        oracle:\n#          type: ${spring.datasource.type}\n#          driverClassName: oracle.jdbc.OracleDriver\n#          url: ${datasource.system-oracle.url}\n#          username: ${datasource.system-oracle.username}\n#          password: ${datasource.system-oracle.password}\n#          hikari:\n#            connectionTestQuery: SELECT 1 FROM DUAL\n\n#        postgres:\n#          type: ${spring.datasource.type}\n#          driverClassName: org.postgresql.Driver\n#          url: ${datasource.system-postgres.url}\n#          username: ${datasource.system-postgres.username}\n#          password: ${datasource.system-postgres.password}\n\n# 代码生成 配置\ngen:\n  # 作者\n  author: fly\n  # 默认生成包路径 system 需改成自己的模块名称 如 system monitor tool\n  packageName: com.fly.system\n  # 自动去除表前缀，默认是false\n  autoRemovePre: false\n  # 表前缀（生成类名不会包含表前缀，多个用逗号分隔）\n  tablePrefix: sys_\n\n', '30f3847a6356e97000b4c435e9f626b4', '2023-04-20 02:03:15', '2023-04-20 02:03:16', NULL, '120.85.112.40', 'I', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (0, 41, 'flycloud-job-dev.yaml', 'DEFAULT_GROUP', '', '\nspring:\n  datasource:\n    type: ${spring.datasource.type}\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: ${datasource.job.url}\n    username: ${datasource.job.username}\n    password: ${datasource.job.password}\n\n#        oracle:\n#          type: ${spring.datasource.type}\n#          driverClassName: oracle.jdbc.OracleDriver\n#          url: ${datasource.system-oracle.url}\n#          username: ${datasource.system-oracle.username}\n#          password: ${datasource.system-oracle.password}\n#          hikari:\n#            connectionTestQuery: SELECT 1 FROM DUAL\n\n#        postgres:\n#          type: ${spring.datasource.type}\n#          driverClassName: org.postgresql.Driver\n#          url: ${datasource.system-postgres.url}\n#          username: ${datasource.system-postgres.username}\n#          password: ${datasource.system-postgres.password}\n\n\nxxl:\n  job:\n    # 执行器开关\n    enabled: true\n    # 调度中心地址：如调度中心集群部署存在多个地址则用逗号分隔。\n    # admin-addresses: http://localhost:9900\n    # 调度中心应用名 通过服务名连接调度中心(启用admin-appname会导致admin-addresses不生效)\n    admin-appname: fly-xxl-job-admin\n    # 执行器通讯TOKEN：非空时启用\n    access-token: xxl-job\n    # 执行器配置\n    executor:\n      # 执行器AppName：执行器心跳注册分组依据；为空则关闭自动注册\n      appname: ${spring.application.name}-executor\n      # 执行器端口号 执行器从19901开始往后写\n      port: 9901\n      # 执行器注册：默认IP:PORT\n      address:\n      # 执行器IP：默认自动获取IP\n      ip:\n      # 执行器运行日志文件存储磁盘路径\n      logpath: ./logs/${spring.application.name}/xxl-job\n      # 执行器日志文件保存天数：大于3生效\n      logretentiondays: 30', '855f2453b75b7bc1f28568d1f965ff5a', '2023-04-20 02:07:36', '2023-04-20 02:07:37', NULL, '116.21.159.246', 'I', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (0, 42, 'flycloud-mall-dev.yaml', 'DEFAULT_GROUP', '', '\nspring:\n  datasource:\n    dynamic:\n      # 设置默认的数据源或者数据源组,默认值即为 master\n      primary: master\n      datasource:\n        # 主库数据源\n        master:\n          type: ${spring.datasource.type}\n          driver-class-name: com.mysql.cj.jdbc.Driver\n          url: ${datasource.mall-master.url}\n          username: ${datasource.mall-master.username}\n          password: ${datasource.mall-master.password}\n\n\n#       其他数据库系统-参数说明:          \n#        oracle:\n#          type: ${spring.datasource.type}\n#          driverClassName: oracle.jdbc.OracleDriver\n#          url: ${datasource.mall-oracle.url}\n#          username: ${datasource.mall-oracle.username}\n#          password: ${datasource.mall-oracle.password}\n#          hikari:\n#            connectionTestQuery: SELECT 1 FROM DUAL\n\n#        postgres:\n#          type: ${spring.datasource.type}\n#          driverClassName: org.postgresql.Driver\n#          url: ${datasource.mall-postgres.url}\n#          username: ${datasource.mall-postgres.username}\n#          password: ${datasource.mall-postgres.password}\n', 'a8815931a4ab595219486f36619f3156', '2023-04-20 02:09:22', '2023-04-20 02:09:23', NULL, '116.21.159.246', 'I', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (33, 43, 'flycloud-system-dev.yaml', 'DEFAULT_GROUP', '', '\nspring:\n  datasource:\n    dynamic:\n      # 设置默认的数据源或者数据源组,默认值即为 master\n      primary: master\n      datasource:\n        # 主库数据源\n        master:\n          type: ${spring.datasource.type}\n          driver-class-name: com.mysql.cj.jdbc.Driver\n          url: ${datasource.system-master.url}\n          username: ${datasource.system-master.username}\n          password: ${datasource.system-master.password}\n\n\n#       其他数据库系统-参数说明 (主要是 driver-class-name):          \n#        oracle:\n#          type: ${spring.datasource.type}\n#          driverClassName: oracle.jdbc.OracleDriver\n#          url: ${datasource.system-oracle.url}\n#          username: ${datasource.system-oracle.username}\n#          password: ${datasource.system-oracle.password}\n#          hikari:\n#            connectionTestQuery: SELECT 1 FROM DUAL\n\n#        postgres:\n#          type: ${spring.datasource.type}\n#          driverClassName: org.postgresql.Driver\n#          url: ${datasource.system-postgres.url}\n#          username: ${datasource.system-postgres.username}\n#          password: ${datasource.system-postgres.password}\n', '2fcf60b0f97f7079543a1e2a83f32d52', '2023-04-20 02:09:51', '2023-04-20 02:09:51', 'nacos', '116.21.159.246', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (0, 44, 'flycloud-music-dev.yaml', 'DEFAULT_GROUP', '', '\nspring:\n  datasource:\n    dynamic:\n      # 设置默认的数据源或者数据源组,默认值即为 master\n      primary: master\n      datasource:\n        # 主库数据源\n        master:\n          type: ${spring.datasource.type}\n          driver-class-name: com.mysql.cj.jdbc.Driver\n          url: ${datasource.music-master.url}\n          username: ${datasource.music-master.username}\n          password: ${datasource.music-master.password}\n\n\n#       其他数据库系统-参数说明:          \n#        oracle:\n#          type: ${spring.datasource.type}\n#          driverClassName: oracle.jdbc.OracleDriver\n#          url: ${datasource.music-oracle.url}\n#          username: ${datasource.music-oracle.username}\n#          password: ${datasource.music-oracle.password}\n#          hikari:\n#            connectionTestQuery: SELECT 1 FROM DUAL\n\n#        postgres:\n#          type: ${spring.datasource.type}\n#          driverClassName: org.postgresql.Driver\n#          url: ${datasource.music-postgres.url}\n#          username: ${datasource.music-postgres.username}\n#          password: ${datasource.music-postgres.password}\n', 'f03cd2776ac489e9528efeb47540fc06', '2023-04-20 02:10:55', '2023-04-20 02:10:56', NULL, '116.21.159.246', 'I', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (1, 45, 'application-common.yaml', 'DEFAULT_GROUP', '', '\n# spring 配置\nspring:\n  # 资源信息\n  messages:\n    # 国际化资源文件路径\n    basename: i18n/messages\n  servlet:\n    multipart:\n      # 单个文件大小\n      max-file-size: 1000MB\n      # 设置总上传的文件大小\n      max-request-size: 5000MB\n  mvc:\n    format:\n      date-time: yyyy-MM-dd HH:mm:ss\n  #jackson配置\n  jackson:\n    # 日期格式化\n    date-format: yyyy-MM-dd HH:mm:ss\n    time-zone: GMT+8\n    serialization:\n      # 格式化输出\n      INDENT_OUTPUT: false\n      # 忽略无法转换的对象\n      fail_on_empty_beans: false\n    deserialization:\n      # 允许对象忽略json中不存在的属性\n      fail_on_unknown_properties: false\n  cloud:\n    # sentinel 配置\n    # sentinel:\n    #   # sentinel 开关\n    #   enabled: true\n    #   # 取消控制台懒加载\n    #   eager: true\n    #   transport:\n    #     # dashboard控制台服务名 用于服务发现\n    #     # 如无此配置将默认使用下方 dashboard 配置直接注册\n    #     server-name: ruoyi-sentinel-dashboard\n    #     # 客户端指定注册的ip 用于多网卡ip不稳点使用\n    #     # client-ip:\n    #     # 控制台地址 从1.3.0开始使用 server-name 注册\n    #     # dashboard: localhost:8718\n\n  # redis通用配置 子服务可以自行配置进行覆盖\n  # redis:\n  #   host: 39.98.125.88\n  #   port: 6379\n  #   # 密码(如没有密码请注释掉)\n  #   # password:\n  #   database: 0\n  #   timeout: 10s\n  #   ssl: false\n\n\n# redisson 配置\n# redisson:\n#   # redis key前缀\n#   keyPrefix:\n#   # 线程池数量\n#   threads: 4\n#   # Netty线程池数量\n#   nettyThreads: 8\n#   # 单节点配置\n#   singleServerConfig:\n#     # 客户端名称\n#     clientName: ${spring.application.name}\n#     # 最小空闲连接数\n#     connectionMinimumIdleSize: 8\n#     # 连接池大小\n#     connectionPoolSize: 32\n#     # 连接空闲超时，单位：毫秒\n#     idleConnectionTimeout: 10000\n#     # 命令等待超时，单位：毫秒\n#     timeout: 3000\n#     # 发布和订阅连接池大小\n#     subscriptionConnectionPoolSize: 50\n    \n\n# springdoc 配置\nspringdoc:\n  api-docs:\n    # 是否开启接口文档\n    enabled: true\n  swagger-ui:\n    # 持久化认证数据\n    persistAuthorization: true\n\n\n# swagger 配置\nswagger:\n  enabled: true\n  title: Fly Swagger API\n  gateway: http://localhost:8080\n  token-url: ${swagger.gateway}/auth/oauth/token\n  scope: server\n  services:\n    flycloud-gateway: flycloud-gateway\n    flycloud-system: flycloud-system\n    flycloud-mall: flycloud-mall\n', '1c97bc3db1b4408bca4c5cdf94d0aa13', '2023-04-20 02:39:04', '2023-04-20 02:39:05', 'nacos', '116.21.159.246', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (1, 46, 'application-common.yaml', 'DEFAULT_GROUP', '', '\n# spring 配置\nspring:\n  # 资源信息\n  messages:\n    # 国际化资源文件路径\n    basename: i18n/messages\n  servlet:\n    multipart:\n      # 单个文件大小\n      max-file-size: 1000MB\n      # 设置总上传的文件大小\n      max-request-size: 5000MB\n  mvc:\n    format:\n      date-time: yyyy-MM-dd HH:mm:ss\n  #jackson配置\n  jackson:\n    # 日期格式化\n    date-format: yyyy-MM-dd HH:mm:ss\n    time-zone: GMT+8\n    serialization:\n      # 格式化输出\n      INDENT_OUTPUT: false\n      # 忽略无法转换的对象\n      fail_on_empty_beans: false\n    deserialization:\n      # 允许对象忽略json中不存在的属性\n      fail_on_unknown_properties: false\n  cloud:\n    # sentinel 配置\n    # sentinel:\n    #   # sentinel 开关\n    #   enabled: true\n    #   # 取消控制台懒加载\n    #   eager: true\n    #   transport:\n    #     # dashboard控制台服务名 用于服务发现\n    #     # 如无此配置将默认使用下方 dashboard 配置直接注册\n    #     server-name: ruoyi-sentinel-dashboard\n    #     # 客户端指定注册的ip 用于多网卡ip不稳点使用\n    #     # client-ip:\n    #     # 控制台地址 从1.3.0开始使用 server-name 注册\n    #     # dashboard: localhost:8718\n\n  # redis通用配置 子服务可以自行配置进行覆盖\n  # redis:\n  #   host: 39.98.125.88\n  #   port: 6379\n  #   # 密码(如没有密码请注释掉)\n  #   # password:\n  #   database: 0\n  #   timeout: 10s\n  #   ssl: false\n\n\n# redisson 配置\n# redisson:\n#   # redis key前缀\n#   keyPrefix:\n#   # 线程池数量\n#   threads: 4\n#   # Netty线程池数量\n#   nettyThreads: 8\n#   # 单节点配置\n#   singleServerConfig:\n#     # 客户端名称\n#     clientName: ${spring.application.name}\n#     # 最小空闲连接数\n#     connectionMinimumIdleSize: 8\n#     # 连接池大小\n#     connectionPoolSize: 32\n#     # 连接空闲超时，单位：毫秒\n#     idleConnectionTimeout: 10000\n#     # 命令等待超时，单位：毫秒\n#     timeout: 3000\n#     # 发布和订阅连接池大小\n#     subscriptionConnectionPoolSize: 50\n    \n\n# springdoc 配置\nspringdoc:\n  api-docs:\n    # 是否开启接口文档\n    enabled: true\n  swagger-ui:\n    # 持久化认证数据\n    persistAuthorization: true\n\n\n# swagger 配置\nswagger:\n  enabled: true\n  title: Fly Swagger API\n  gateway: http://localhost:8080\n  token-url: ${swagger.gateway}/auth/oauth/token\n  scope: server\n  services:\n    flycloud-gateway: flycloud-gateway\n    flycloud-system: flycloud-system\n    flycloud-mall: flycloud-mall\n    flycloud-music: flycloud-music\n    flycloud-gen: flycloud-gen\n    flycloud-job: flycloud-job\n', 'bb3c7add194e7a6861a9bb359b56eafc', '2023-04-20 02:43:13', '2023-04-20 02:43:13', 'nacos', '116.21.159.246', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (1, 47, 'application-common.yaml', 'DEFAULT_GROUP', '', '\n# spring 配置\nspring:\n  # 资源信息\n  messages:\n    # 国际化资源文件路径\n    basename: i18n/messages\n  servlet:\n    multipart:\n      # 单个文件大小\n      max-file-size: 1000MB\n      # 设置总上传的文件大小\n      max-request-size: 5000MB\n  mvc:\n    format:\n      date-time: yyyy-MM-dd HH:mm:ss\n  #jackson配置\n  jackson:\n    # 日期格式化\n    date-format: yyyy-MM-dd HH:mm:ss\n    time-zone: GMT+8\n    serialization:\n      # 格式化输出\n      INDENT_OUTPUT: false\n      # 忽略无法转换的对象\n      fail_on_empty_beans: false\n    deserialization:\n      # 允许对象忽略json中不存在的属性\n      fail_on_unknown_properties: false\n  cloud:\n    # sentinel 配置\n    # sentinel:\n    #   # sentinel 开关\n    #   enabled: true\n    #   # 取消控制台懒加载\n    #   eager: true\n    #   transport:\n    #     # dashboard控制台服务名 用于服务发现\n    #     # 如无此配置将默认使用下方 dashboard 配置直接注册\n    #     server-name: ruoyi-sentinel-dashboard\n    #     # 客户端指定注册的ip 用于多网卡ip不稳点使用\n    #     # client-ip:\n    #     # 控制台地址 从1.3.0开始使用 server-name 注册\n    #     # dashboard: localhost:8718\n\n  # redis通用配置 子服务可以自行配置进行覆盖\n  # redis:\n  #   host: 39.98.125.88\n  #   port: 6379\n  #   # 密码(如没有密码请注释掉)\n  #   # password:\n  #   database: 0\n  #   timeout: 10s\n  #   ssl: false\n\n\n# redisson 配置\n# redisson:\n#   # redis key前缀\n#   keyPrefix:\n#   # 线程池数量\n#   threads: 4\n#   # Netty线程池数量\n#   nettyThreads: 8\n#   # 单节点配置\n#   singleServerConfig:\n#     # 客户端名称\n#     clientName: ${spring.application.name}\n#     # 最小空闲连接数\n#     connectionMinimumIdleSize: 8\n#     # 连接池大小\n#     connectionPoolSize: 32\n#     # 连接空闲超时，单位：毫秒\n#     idleConnectionTimeout: 10000\n#     # 命令等待超时，单位：毫秒\n#     timeout: 3000\n#     # 发布和订阅连接池大小\n#     subscriptionConnectionPoolSize: 50\n    \n\n# springdoc 配置\nspringdoc:\n  api-docs:\n    # 是否开启接口文档\n    enabled: true\n  swagger-ui:\n    # 持久化认证数据\n    persistAuthorization: true\n\n\n# swagger 配置\nswagger:\n  enabled: true\n  title: Fly Swagger API\n  gateway: http://localhost:8080\n  token-url: ${swagger.gateway}/auth/oauth/token\n  scope: server\n  services:\n    flycloud-gateway: flycloud-gateway\n    flycloud-system: flycloud-system\n    flycloud-mall: flycloud-mall\n    flycloud-music: flycloud-music\n    flycloud-generator: flycloud-generator\n    flycloud-job: flycloud-job\n', 'b4169778452315dd011233670af19ff4', '2023-04-20 02:59:13', '2023-04-20 02:59:14', 'nacos', '112.94.100.87', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (29, 48, 'application-datasource.yaml', 'DEFAULT_GROUP', '', '\n# 数据源连接 配置\ndatasource:\n\n  # 系统模块的-主库数据源 (根据需求配置-从库数据源)\n  system-master:\n    # jdbc 所有参数配置参考 https://lionli.blog.csdn.net/article/details/122018562\n    # rewriteBatchedStatements=true 批处理优化 大幅提升批量插入更新删除性能\n    url: jdbc:mysql://localhost:3306/fly-cloud?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: 123456\n  # system-slave:\n\n  # 商城模块的-主库数据源\n  mall-master:\n    url: jdbc:mysql://localhost:3306/fly-mall?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: 123456\n\n  # 音乐模块的-主库数据源\n  mall-master:\n    url: jdbc:mysql://localhost:3306/fly-music?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: 123456\n\n  # 定时任务数据库\n  job:\n    url: jdbc:mysql://localhost:3306/fly-job?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: 123456\n\n  # 自动生成数据库说明: 由于要自动生成某个数据库的表信息, 所以只需要指向你要生成的已经在使用的数据库即可\n  gen:\n    url: jdbc:mysql://localhost:3306/fly-cloud?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: 123456\n    \n#  其他数据库系统说明\n#  system-oracle:\n#    url: jdbc:oracle:thin:@//localhost:1521/XE\n#    username: ROOT\n#    password: password\n\n#  system-postgres:\n#    url: jdbc:postgresql://localhost:5432/postgres?useUnicode=true&characterEncoding=utf8&useSSL=true&autoReconnect=true&reWriteBatchedInserts=true\n#    username: root\n#    password: password\n\n\n# 数据源属性 配置\nspring:\n  datasource:\n    type: com.zaxxer.hikari.HikariDataSource\n    # 动态数据源文档 https://www.kancloud.cn/tracy5546/dynamic-datasource/content\n    dynamic:\n      # 性能分析插件(有性能损耗 不建议生产环境使用)\n      p6spy: true\n      # 开启seata代理，开启后默认每个数据源都代理，如果某个不需要代理可单独关闭\n      seata: true\n      # 严格模式 匹配不到数据源则报错\n      strict: true\n      hikari:\n        # 最大连接池数量\n        maxPoolSize: 20\n        # 最小空闲线程数量\n        minIdle: 10\n        # 配置获取连接等待超时的时间\n        connectionTimeout: 30000\n        # 校验超时时间\n        validationTimeout: 5000\n        # 空闲连接存活最大时间，默认10分钟\n        idleTimeout: 600000\n        # 此属性控制池中连接的最长生命周期，值0表示无限生命周期，默认30分钟\n        maxLifetime: 1800000\n        # 连接测试query（配置检测连接是否有效）\n        connectionTestQuery: SELECT 1\n        # 多久检查一次连接的活性\n        keepaliveTime: 30000\n\n\n# seata配置\nseata:\n  # 关闭自动代理\n  enable-auto-data-source-proxy: false\n\n\n# MyBatisPlus配置  (https://baomidou.com/config/)\nmybatis-plus:\n  # 扫描mapper接口包有两种:\n  # todo 法1: 默认扫描(也就是加注解), 由于Springboot默认是在主类(@SpringBootApplication)所在的包名下扫描并注册bean, 即在mapper接口类加上注解@Mapper即可\n  # todo 法2: 手动扫描, 在相关启动配置类(如MybatisPlusConfig)加上@MapperScan(\"${mybatis-plus.mapperPackage}\" 即可\n  # 本项目用的是 法2 (因为基本上整个项目的包名前缀都是一样的,除非要注入第三方的bean); 如有需要支持多包可在注解配置 或 提升扫包等级 (例如 com.**.**.mapper)\n  mapperPackage: com.fly.**.mapper\n  # 对应的 XML 文件位置\n  mapperLocations: classpath*:mapper/**/*Mapper.xml\n  # 实体扫描，多个package用逗号或者分号分隔\n  typeAliasesPackage: com.fly.**.domain\n  # 启动时是否检查 MyBatis XML 文件的存在，默认不检查\n  checkConfigLocation: false\n  configuration:\n    # 自动驼峰命名规则（camel case）映射\n    mapUnderscoreToCamelCase: true\n    # MyBatis 自动映射策略\n    # NONE：不启用 PARTIAL：只对非嵌套 resultMap 自动映射 FULL：对所有 resultMap 自动映射\n    autoMappingBehavior: PARTIAL\n    # MyBatis 自动映射时未知列或未知属性处理策\n    # NONE：不做处理 WARNING：打印相关警告 FAILING：抛出异常和详细信息\n    autoMappingUnknownColumnBehavior: NONE\n    # 更详细的日志输出 会有性能损耗 org.apache.ibatis.logging.stdout.StdOutImpl\n    # 关闭日志记录 (可单纯使用 p6spy 分析) org.apache.ibatis.logging.nologging.NoLoggingImpl\n    # 默认日志输出 org.apache.ibatis.logging.slf4j.Slf4jImpl\n    logImpl: org.apache.ibatis.logging.nologging.NoLoggingImpl\n  global-config:\n    # 是否打印 Logo banner\n    banner: true\n    dbConfig:\n      # 主键类型\n      # AUTO 自增 NONE 空 INPUT 用户输入 ASSIGN_ID 雪花 ASSIGN_UUID 唯一 UUID\n      idType: ASSIGN_ID\n      # 逻辑已删除值\n      logicDeleteValue: 2\n      # 逻辑未删除值\n      logicNotDeleteValue: 0\n      insertStrategy: NOT_NULL\n      updateStrategy: NOT_NULL\n      where-strategy: NOT_NULL\n\n\n# 数据加密\nmybatis-encryptor:\n  # 是否开启加密\n  enable: false\n  # 默认加密算法\n  algorithm: BASE64\n  # 编码方式 BASE64/HEX。默认BASE64\n  encode: BASE64\n  # 安全秘钥 对称算法的秘钥 如：AES，SM4\n  password:\n  # 公私钥 非对称算法的公私钥 如：SM2，RSA\n  publicKey:\n  privateKey:', '914d03177097810a1a771f38dc057dc8', '2023-04-20 03:22:59', '2023-04-20 03:23:00', 'nacos', '120.85.115.246', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (29, 49, 'application-datasource.yaml', 'DEFAULT_GROUP', '', '\n# 数据源连接 配置\ndatasource:\n\n  # 系统模块的-主库数据源 (根据需求配置-从库数据源)\n  system-master:\n    # jdbc 所有参数配置参考 https://lionli.blog.csdn.net/article/details/122018562\n    # rewriteBatchedStatements=true 批处理优化 大幅提升批量插入更新删除性能\n    url: jdbc:mysql://localhost:3306/fly-cloud?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: 123456\n  # system-slave:\n\n  # 商城模块的-主库数据源\n  mall-master:\n    url: jdbc:mysql://localhost:3306/fly-mall?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: 123456\n\n  # 音乐模块的-主库数据源\n  mall-master:\n    url: jdbc:mysql://localhost:3306/fly-music?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: 123456\n\n  # 定时任务数据库\n  job:\n    url: jdbc:mysql://localhost:3306/fly-job?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: 123456\n\n  # 自动生成数据库说明: 由于要自动生成某个数据库的表信息, 所以只需要指向你要生成的已经在使用的数据库即可\n  gen:\n    url: jdbc:mysql://localhost:3306/fly-cloud?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: 123456\n    \n#  其他数据库系统说明\n#  system-oracle:\n#    url: jdbc:oracle:thin:@//localhost:1521/XE\n#    username: ROOT\n#    password: password\n\n#  system-postgres:\n#    url: jdbc:postgresql://localhost:5432/postgres?useUnicode=true&characterEncoding=utf8&useSSL=true&autoReconnect=true&reWriteBatchedInserts=true\n#    username: root\n#    password: password\n\n\n# 数据源属性 配置\nspring:\n  datasource:\n    type: com.zaxxer.hikari.HikariDataSource\n    # 动态数据源文档 https://www.kancloud.cn/tracy5546/dynamic-datasource/content\n    dynamic:\n      # 性能分析插件(有性能损耗 不建议生产环境使用)\n      p6spy: true\n      # 开启seata代理，开启后默认每个数据源都代理，如果某个不需要代理可单独关闭\n      seata: true\n      # 严格模式 匹配不到数据源则报错\n      strict: true\n      hikari:\n        # 最大连接池数量\n        maxPoolSize: 20\n        # 最小空闲线程数量\n        minIdle: 10\n        # 配置获取连接等待超时的时间\n        connectionTimeout: 30000\n        # 校验超时时间\n        validationTimeout: 5000\n        # 空闲连接存活最大时间，默认10分钟\n        idleTimeout: 600000\n        # 此属性控制池中连接的最长生命周期，值0表示无限生命周期，默认30分钟\n        maxLifetime: 1800000\n        # 连接测试query（配置检测连接是否有效）\n        connectionTestQuery: SELECT 1\n        # 多久检查一次连接的活性\n        keepaliveTime: 30000\n\n\n# seata配置\nseata:\n  # 关闭自动代理\n  enable-auto-data-source-proxy: false\n\n\n# MyBatisPlus配置  (https://baomidou.com/config/)\nmybatis-plus:\n  # 扫描mapper接口包有两种:\n  # todo 法1: 默认扫描(也就是加注解), 由于Springboot默认是在主类(@SpringBootApplication)所在的包名下扫描并注册bean, 即在mapper接口类加上注解@Mapper即可\n  # todo 法2: 手动扫描, 在相关启动配置类(如MybatisPlusConfig)加上@MapperScan(\"${mybatis-plus.mapperPackage}\" 即可\n  # 本项目用的是 法2 (因为基本上整个项目的包名前缀都是一样的,除非要注入第三方的bean); 如有需要支持多包可在注解配置 或 提升扫包等级 (例如 com.**.**.mapper)\n  mapperPackage: com.fly.**.mapper\n  # 对应的 XML 文件位置\n  mapperLocations: classpath*:mapper/**/*Mapper.xml\n  # 实体扫描，多个package用逗号或者分号分隔\n  typeAliasesPackage: com.fly.**.domain\n  # 启动时是否检查 MyBatis XML 文件的存在，默认不检查\n  checkConfigLocation: false\n  configuration:\n    # 自动驼峰命名规则（camel case）映射\n    mapUnderscoreToCamelCase: true\n    # MyBatis 自动映射策略\n    # NONE：不启用 PARTIAL：只对非嵌套 resultMap 自动映射 FULL：对所有 resultMap 自动映射\n    autoMappingBehavior: PARTIAL\n    # MyBatis 自动映射时未知列或未知属性处理策\n    # NONE：不做处理 WARNING：打印相关警告 FAILING：抛出异常和详细信息\n    autoMappingUnknownColumnBehavior: NONE\n    # 更详细的日志输出 会有性能损耗 org.apache.ibatis.logging.stdout.StdOutImpl\n    # 关闭日志记录 (可单纯使用 p6spy 分析) org.apache.ibatis.logging.nologging.NoLoggingImpl\n    # 默认日志输出 org.apache.ibatis.logging.slf4j.Slf4jImpl\n    logImpl: org.apache.ibatis.logging.nologging.NoLoggingImpl\n  global-config:\n    # 是否打印 Logo banner\n    banner: true\n    dbConfig:\n      # 主键类型\n      # AUTO 自增 NONE 空 INPUT 用户输入 ASSIGN_ID 雪花 ASSIGN_UUID 唯一 UUID\n      idType: ASSIGN_ID\n      # 逻辑已删除值\n      logicDeleteValue: 2\n      # 逻辑未删除值\n      logicNotDeleteValue: 0\n      insertStrategy: NOT_NULL\n      updateStrategy: NOT_NULL\n      where-strategy: NOT_NULL\n\n\n# 数据加密\nmybatis-encryptor:\n  # 是否开启加密\n  enable: false\n  # 默认加密算法\n  algorithm: BASE64\n  # 编码方式 BASE64/HEX。默认BASE64\n  encode: BASE64\n  # 安全秘钥 对称算法的秘钥 如：AES，SM4\n  password:\n  # 公私钥 非对称算法的公私钥 如：SM2，RSA\n  publicKey:\n  privateKey:', '914d03177097810a1a771f38dc057dc8', '2023-04-20 03:33:41', '2023-04-20 03:33:41', 'nacos', '120.85.98.82', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (0, 50, 'seata-server.properties', 'DEFAULT_GROUP', '', '\nservice.vgroupMapping.ruoyi-auth-group=default\nservice.vgroupMapping.ruoyi-system-group=default\nservice.vgroupMapping.ruoyi-resource-group=default\nservice.vgroupMapping.ruoyi-gen-group=default\nservice.vgroupMapping.ruoyi-job-group=default\n\nservice.enableDegrade=false\nservice.disableGlobalTransaction=false\n\n#Transaction storage configuration, only for the server. The file, DB, and redis configuration values are optional.\nstore.mode=db\nstore.lock.mode=db\nstore.session.mode=db\n#Used for password encryption\nstore.publicKey=\n\n#These configurations are required if the `store mode` is `db`. If `store.mode,store.lock.mode,store.session.mode` are not equal to `db`, you can remove the configuration block.\nstore.db.datasource=hikari\nstore.db.dbType=mysql\nstore.db.driverClassName=com.mysql.cj.jdbc.Driver\nstore.db.url=jdbc:mysql://39.98.125.88/fly-seata?useUnicode=true&rewriteBatchedStatements=true\nstore.db.user=root\nstore.db.password=155007\nstore.db.minConn=5\nstore.db.maxConn=30\nstore.db.globalTable=global_table\nstore.db.branchTable=branch_table\nstore.db.distributedLockTable=distributed_lock\nstore.db.queryLimit=100\nstore.db.lockTable=lock_table\nstore.db.maxWait=5000\n\n# redis 模式 store.mode=redis 开启 (控制台查询功能有限,不影响实际执行功能)\n# store.redis.host=127.0.0.1\n# store.redis.port=6379\n# 最大连接数\n# store.redis.maxConn=10\n# 最小连接数\n# store.redis.minConn=1\n# store.redis.database=0\n# store.redis.password=\n# store.redis.queryLimit=100\n\n#Transaction rule configuration, only for the server\nserver.recovery.committingRetryPeriod=1000\nserver.recovery.asynCommittingRetryPeriod=1000\nserver.recovery.rollbackingRetryPeriod=1000\nserver.recovery.timeoutRetryPeriod=1000\nserver.maxCommitRetryTimeout=-1\nserver.maxRollbackRetryTimeout=-1\nserver.rollbackRetryTimeoutUnlockEnable=false\nserver.distributedLockExpireTime=10000\nserver.xaerNotaRetryTimeout=60000\nserver.session.branchAsyncQueueSize=5000\nserver.session.enableBranchAsyncRemove=false\n\n#Transaction rule configuration, only for the client\nclient.rm.asyncCommitBufferLimit=10000\nclient.rm.lock.retryInterval=10\nclient.rm.lock.retryTimes=30\nclient.rm.lock.retryPolicyBranchRollbackOnConflict=true\nclient.rm.reportRetryCount=5\nclient.rm.tableMetaCheckEnable=true\nclient.rm.tableMetaCheckerInterval=60000\nclient.rm.sqlParserType=druid\nclient.rm.reportSuccessEnable=false\nclient.rm.sagaBranchRegisterEnable=false\nclient.rm.sagaJsonParser=fastjson\nclient.rm.tccActionInterceptorOrder=-2147482648\nclient.tm.commitRetryCount=5\nclient.tm.rollbackRetryCount=5\nclient.tm.defaultGlobalTransactionTimeout=60000\nclient.tm.degradeCheck=false\nclient.tm.degradeCheckAllowTimes=10\nclient.tm.degradeCheckPeriod=2000\nclient.tm.interceptorOrder=-2147482648\nclient.undo.dataValidation=true\nclient.undo.logSerialization=jackson\nclient.undo.onlyCareUpdateColumns=true\nserver.undo.logSaveDays=7\nserver.undo.logDeletePeriod=86400000\nclient.undo.logTable=undo_log\nclient.undo.compress.enable=true\nclient.undo.compress.type=zip\nclient.undo.compress.threshold=64k\n\n#For TCC transaction mode\ntcc.fence.logTableName=tcc_fence_log\ntcc.fence.cleanPeriod=1h\n\n#Log rule configuration, for client and server\nlog.exceptionRate=100\n\n#Metrics configuration, only for the server\nmetrics.enabled=false\nmetrics.registryType=compact\nmetrics.exporterList=prometheus\nmetrics.exporterPrometheusPort=9898\n\n#For details about configuration items, see https://seata.io/zh-cn/docs/user/configurations.html\n#Transport configuration, for client and server\ntransport.type=TCP\ntransport.server=NIO\ntransport.heartbeat=true\ntransport.enableTmClientBatchSendRequest=false\ntransport.enableRmClientBatchSendRequest=true\ntransport.enableTcServerBatchSendResponse=false\ntransport.rpcRmRequestTimeout=30000\ntransport.rpcTmRequestTimeout=30000\ntransport.rpcTcRequestTimeout=30000\ntransport.threadFactory.bossThreadPrefix=NettyBoss\ntransport.threadFactory.workerThreadPrefix=NettyServerNIOWorker\ntransport.threadFactory.serverExecutorThreadPrefix=NettyServerBizHandler\ntransport.threadFactory.shareBossWorker=false\ntransport.threadFactory.clientSelectorThreadPrefix=NettyClientSelector\ntransport.threadFactory.clientSelectorThreadSize=1\ntransport.threadFactory.clientWorkerThreadPrefix=NettyClientWorkerThread\ntransport.threadFactory.bossThreadSize=1\ntransport.threadFactory.workerThreadSize=default\ntransport.shutdown.wait=3\ntransport.serialization=seata\ntransport.compressor=none\n', 'e70b200cf104c0624cf8e847a0fb13d8', '2023-04-20 11:20:38', '2023-04-20 11:20:39', NULL, '116.21.159.246', 'I', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (29, 51, 'application-datasource.yaml', 'DEFAULT_GROUP', '', '\n# 数据源连接 配置\ndatasource:\n\n  # 系统模块的-主库数据源 (根据需求配置-从库数据源)\n  system-master:\n    # jdbc 所有参数配置参考 https://lionli.blog.csdn.net/article/details/122018562\n    # rewriteBatchedStatements=true 批处理优化 大幅提升批量插入更新删除性能\n    url: jdbc:mysql://localhost:3306/fly-cloud?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: 123456\n  # system-slave:\n\n  # 商城模块的-主库数据源\n  mall-master:\n    url: jdbc:mysql://localhost:3306/fly-mall?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: 123456\n\n  # 音乐模块的-主库数据源\n  music-master:\n    url: jdbc:mysql://localhost:3306/fly-music?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: 123456\n\n  # 定时任务数据库\n  job:\n    url: jdbc:mysql://localhost:3306/fly-job?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: 123456\n\n  # 自动生成数据库说明: 由于要自动生成某个数据库的表信息, 所以只需要指向你要生成的已经在使用的数据库即可\n  gen:\n    url: jdbc:mysql://localhost:3306/fly-cloud?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: 123456\n    \n#  其他数据库系统说明\n#  system-oracle:\n#    url: jdbc:oracle:thin:@//localhost:1521/XE\n#    username: ROOT\n#    password: password\n\n#  system-postgres:\n#    url: jdbc:postgresql://localhost:5432/postgres?useUnicode=true&characterEncoding=utf8&useSSL=true&autoReconnect=true&reWriteBatchedInserts=true\n#    username: root\n#    password: password\n\n\n# 数据源属性 配置\nspring:\n  datasource:\n    type: com.zaxxer.hikari.HikariDataSource\n    # 动态数据源文档 https://www.kancloud.cn/tracy5546/dynamic-datasource/content\n    dynamic:\n      # 性能分析插件(有性能损耗 不建议生产环境使用)\n      p6spy: true\n      # 开启seata代理，开启后默认每个数据源都代理，如果某个不需要代理可单独关闭\n      seata: true\n      # 严格模式 匹配不到数据源则报错\n      strict: true\n      hikari:\n        # 最大连接池数量\n        maxPoolSize: 20\n        # 最小空闲线程数量\n        minIdle: 10\n        # 配置获取连接等待超时的时间\n        connectionTimeout: 30000\n        # 校验超时时间\n        validationTimeout: 5000\n        # 空闲连接存活最大时间，默认10分钟\n        idleTimeout: 600000\n        # 此属性控制池中连接的最长生命周期，值0表示无限生命周期，默认30分钟\n        maxLifetime: 1800000\n        # 连接测试query（配置检测连接是否有效）\n        connectionTestQuery: SELECT 1\n        # 多久检查一次连接的活性\n        keepaliveTime: 30000\n\n\n# seata配置\nseata:\n  # 关闭自动代理\n  enable-auto-data-source-proxy: false\n\n\n# MyBatisPlus配置  (https://baomidou.com/config/)\nmybatis-plus:\n  # 扫描mapper接口包有两种:\n  # todo 法1: 默认扫描(也就是加注解), 由于Springboot默认是在主类(@SpringBootApplication)所在的包名下扫描并注册bean, 即在mapper接口类加上注解@Mapper即可\n  # todo 法2: 手动扫描, 在相关启动配置类(如MybatisPlusConfig)加上@MapperScan(\"${mybatis-plus.mapperPackage}\" 即可\n  # 本项目用的是 法2 (因为基本上整个项目的包名前缀都是一样的,除非要注入第三方的bean); 如有需要支持多包可在注解配置 或 提升扫包等级 (例如 com.**.**.mapper)\n  mapperPackage: com.fly.**.mapper\n  # 对应的 XML 文件位置\n  mapperLocations: classpath*:mapper/**/*Mapper.xml\n  # 实体扫描，多个package用逗号或者分号分隔\n  typeAliasesPackage: com.fly.**.domain\n  # 启动时是否检查 MyBatis XML 文件的存在，默认不检查\n  checkConfigLocation: false\n  configuration:\n    # 自动驼峰命名规则（camel case）映射\n    mapUnderscoreToCamelCase: true\n    # MyBatis 自动映射策略\n    # NONE：不启用 PARTIAL：只对非嵌套 resultMap 自动映射 FULL：对所有 resultMap 自动映射\n    autoMappingBehavior: PARTIAL\n    # MyBatis 自动映射时未知列或未知属性处理策\n    # NONE：不做处理 WARNING：打印相关警告 FAILING：抛出异常和详细信息\n    autoMappingUnknownColumnBehavior: NONE\n    # 更详细的日志输出 会有性能损耗 org.apache.ibatis.logging.stdout.StdOutImpl\n    # 关闭日志记录 (可单纯使用 p6spy 分析) org.apache.ibatis.logging.nologging.NoLoggingImpl\n    # 默认日志输出 org.apache.ibatis.logging.slf4j.Slf4jImpl\n    logImpl: org.apache.ibatis.logging.nologging.NoLoggingImpl\n  global-config:\n    # 是否打印 Logo banner\n    banner: true\n    dbConfig:\n      # 主键类型\n      # AUTO 自增 NONE 空 INPUT 用户输入 ASSIGN_ID 雪花 ASSIGN_UUID 唯一 UUID\n      idType: ASSIGN_ID\n      # 逻辑已删除值\n      logicDeleteValue: 2\n      # 逻辑未删除值\n      logicNotDeleteValue: 0\n      insertStrategy: NOT_NULL\n      updateStrategy: NOT_NULL\n      where-strategy: NOT_NULL\n\n\n# 数据加密\nmybatis-encryptor:\n  # 是否开启加密\n  enable: false\n  # 默认加密算法\n  algorithm: BASE64\n  # 编码方式 BASE64/HEX。默认BASE64\n  encode: BASE64\n  # 安全秘钥 对称算法的秘钥 如：AES，SM4\n  password:\n  # 公私钥 非对称算法的公私钥 如：SM2，RSA\n  publicKey:\n  privateKey:', '62ddc9f1a710a7f452407576319d44c4', '2023-04-21 01:44:18', '2023-04-21 01:44:19', 'nacos', '120.85.114.63', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (10, 52, 'flycloud-gateway-dev.yaml', 'DEFAULT_GROUP', '', '\nspring:\n  cloud:\n    # 网关配置\n    gateway:\n      metrics:\n        enabled: true\n      # 打印请求日志(自定义)\n      requestLog: true\n      discovery:\n        locator:\n          # 开启服务注册和发现\n          enabled: true\n          # 自动配置路由 (手动写路由的话, swagger整合不了)\n      routes:\n\n        # swagger接口地址重写 (只改变转发路由,无其他修改), 如将 https://localhost:8080/v3/api-docs/flycloud-system 这个路径重写为 https://localhost:8080/flycloud-system/v3/api-docs\n        - id: openapi\n          uri: lb://flycloud-gateway\n          predicates:\n            - Path=/v3/api-docs/**\n          filters:\n            - RewritePath=/v3/api-docs/(?<path>.*), /$\\{path}/v3/api-docs\n\n        - id: flycloud-system              # 路由id，没有固定规则但要求唯一, 建议配合服务名\n          # uri: http://localhost:8001     # 目标地址, 即断言匹配后跳转的路由地址 (即类似nginx的代理地址)\n          uri: lb://flycloud-system\n          order: 1\n          predicates:                      # 断言（判断条件）\n            - Path=/flycloud-system/**     # 断言, 路径相匹配的进行路由; 服务一般不用设置servlet-context-path,因为直接让客户端请求带上此断言服务名字即可 (即类似nginx的断言)\n          # filters:\n            # - StripPrefix=1              # 去除第一个路径 (http://localhost:8080/aaa/order/orderInfo -> http://localhost:8080/order/orderInfo)\n            # - PrefixPath=/order          # 请求路径添加前缀 (http://localhost:8080/order/orderInfo -> http://localhost:8080/aaa/order/orderInfo)\n\n            # - RewritePath=/v3/api-docs/(?<path>.*), /$\\{path}/v3/api-docs\n            # 路由重写 (断言之前执行), 如将 https://localhost:8080/v3/api-docs/flycloud-system 这个路径重写为 https://localhost:8080/flycloud-system/v3/api-docs\n\n        - id: flycloud-mall\n          uri: lb://flycloud-mall\n          predicates:\n            - Path=/flycloud-mall/**\n\n\nlogging:\n  level:\n    org:\n      springframework:\n        cloud:\n          gateway: TRACE', 'c2d0ffba7deca266fd6c951da3def6c2', '2023-04-21 02:57:06', '2023-04-21 02:57:06', 'nacos', '120.85.115.246', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (29, 53, 'application-datasource.yaml', 'DEFAULT_GROUP', '', '\n# 数据源连接 配置\ndatasource:\n\n  # 系统模块的-主库数据源 (根据需求配置-从库数据源)\n  system-master:\n    # jdbc 所有参数配置参考 https://lionli.blog.csdn.net/article/details/122018562\n    # rewriteBatchedStatements=true 批处理优化 大幅提升批量插入更新删除性能\n    url: jdbc:mysql://localhost:3306/fly-cloud?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: 123456\n  # system-slave:\n\n  # 商城模块的-主库数据源\n  mall-master:\n    url: jdbc:mysql://localhost:3306/fly-mall?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: 123456\n\n  # 音乐模块的-主库数据源\n  music-master:\n    url: jdbc:mysql://localhost:3306/fly-music?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: 123456\n\n  # 定时任务数据库\n  job:\n    url: jdbc:mysql://localhost:3306/fly-job?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: 123456\n\n  # 自动生成数据库说明: 由于要自动生成某个数据库的表信息, 所以只需要指向你要生成的已经在使用的数据库即可\n  gen:\n    url: jdbc:mysql://localhost:3306/fly-cloud?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: 123456\n    \n#  其他数据库系统说明\n#  system-oracle:\n#    url: jdbc:oracle:thin:@//localhost:1521/XE\n#    username: ROOT\n#    password: password\n\n#  system-postgres:\n#    url: jdbc:postgresql://localhost:5432/postgres?useUnicode=true&characterEncoding=utf8&useSSL=true&autoReconnect=true&reWriteBatchedInserts=true\n#    username: root\n#    password: password\n\n\n# 数据源属性 配置\nspring:\n  datasource:\n    type: com.zaxxer.hikari.HikariDataSource\n    # 动态数据源文档 https://www.kancloud.cn/tracy5546/dynamic-datasource/content\n    dynamic:\n      # 性能分析插件(有性能损耗 不建议生产环境使用)\n      p6spy: true\n      # 开启seata代理，开启后默认每个数据源都代理，如果某个不需要代理可单独关闭\n      # seata: false\n      # 严格模式 匹配不到数据源则报错\n      strict: true\n      hikari:\n        # 最大连接池数量\n        maxPoolSize: 20\n        # 最小空闲线程数量\n        minIdle: 10\n        # 配置获取连接等待超时的时间\n        connectionTimeout: 30000\n        # 校验超时时间\n        validationTimeout: 5000\n        # 空闲连接存活最大时间，默认10分钟\n        idleTimeout: 600000\n        # 此属性控制池中连接的最长生命周期，值0表示无限生命周期，默认30分钟\n        maxLifetime: 1800000\n        # 连接测试query（配置检测连接是否有效）\n        connectionTestQuery: SELECT 1\n        # 多久检查一次连接的活性\n        keepaliveTime: 30000\n\n\n# seata配置\nseata:\n  # 关闭自动代理\n  enable-auto-data-source-proxy: false\n\n\n# MyBatisPlus配置  (https://baomidou.com/config/)\nmybatis-plus:\n  # 扫描mapper接口包有两种:\n  # todo 法1: 默认扫描(也就是加注解), 由于Springboot默认是在主类(@SpringBootApplication)所在的包名下扫描并注册bean, 即在mapper接口类加上注解@Mapper即可\n  # todo 法2: 手动扫描, 在相关启动配置类(如MybatisPlusConfig)加上@MapperScan(\"${mybatis-plus.mapperPackage}\" 即可\n  # 本项目用的是 法2 (因为基本上整个项目的包名前缀都是一样的,除非要注入第三方的bean); 如有需要支持多包可在注解配置 或 提升扫包等级 (例如 com.**.**.mapper)\n  mapperPackage: com.fly.**.mapper\n  # 对应的 XML 文件位置\n  mapperLocations: classpath*:mapper/**/*Mapper.xml\n  # 实体扫描，多个package用逗号或者分号分隔\n  typeAliasesPackage: com.fly.**.domain\n  # 启动时是否检查 MyBatis XML 文件的存在，默认不检查\n  checkConfigLocation: false\n  configuration:\n    # 自动驼峰命名规则（camel case）映射\n    mapUnderscoreToCamelCase: true\n    # MyBatis 自动映射策略\n    # NONE：不启用 PARTIAL：只对非嵌套 resultMap 自动映射 FULL：对所有 resultMap 自动映射\n    autoMappingBehavior: PARTIAL\n    # MyBatis 自动映射时未知列或未知属性处理策\n    # NONE：不做处理 WARNING：打印相关警告 FAILING：抛出异常和详细信息\n    autoMappingUnknownColumnBehavior: NONE\n    # 更详细的日志输出 会有性能损耗 org.apache.ibatis.logging.stdout.StdOutImpl\n    # 关闭日志记录 (可单纯使用 p6spy 分析) org.apache.ibatis.logging.nologging.NoLoggingImpl\n    # 默认日志输出 org.apache.ibatis.logging.slf4j.Slf4jImpl\n    logImpl: org.apache.ibatis.logging.nologging.NoLoggingImpl\n  global-config:\n    # 是否打印 Logo banner\n    banner: true\n    dbConfig:\n      # 主键类型\n      # AUTO 自增 NONE 空 INPUT 用户输入 ASSIGN_ID 雪花 ASSIGN_UUID 唯一 UUID\n      idType: ASSIGN_ID\n      # 逻辑已删除值\n      logicDeleteValue: 2\n      # 逻辑未删除值\n      logicNotDeleteValue: 0\n      insertStrategy: NOT_NULL\n      updateStrategy: NOT_NULL\n      where-strategy: NOT_NULL\n\n\n# 数据加密\nmybatis-encryptor:\n  # 是否开启加密\n  enable: false\n  # 默认加密算法\n  algorithm: BASE64\n  # 编码方式 BASE64/HEX。默认BASE64\n  encode: BASE64\n  # 安全秘钥 对称算法的秘钥 如：AES，SM4\n  password:\n  # 公私钥 非对称算法的公私钥 如：SM2，RSA\n  publicKey:\n  privateKey:', 'f08939711e404028364230a54a348d6c', '2023-04-21 03:56:50', '2023-04-21 03:56:51', 'nacos', '112.94.103.26', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (1, 54, 'application-common.yaml', 'DEFAULT_GROUP', '', '\n# spring 配置\nspring:\n  # 资源信息\n  messages:\n    # 国际化资源文件路径\n    basename: i18n/messages\n  servlet:\n    multipart:\n      # 单个文件大小\n      max-file-size: 1000MB\n      # 设置总上传的文件大小\n      max-request-size: 5000MB\n  mvc:\n    format:\n      date-time: yyyy-MM-dd HH:mm:ss\n  #jackson配置\n  jackson:\n    # 日期格式化\n    date-format: yyyy-MM-dd HH:mm:ss\n    time-zone: GMT+8\n    serialization:\n      # 格式化输出\n      INDENT_OUTPUT: false\n      # 忽略无法转换的对象\n      fail_on_empty_beans: false\n    deserialization:\n      # 允许对象忽略json中不存在的属性\n      fail_on_unknown_properties: false\n  cloud:\n    # sentinel 配置\n    # sentinel:\n    #   # sentinel 开关\n    #   enabled: true\n    #   # 取消控制台懒加载\n    #   eager: true\n    #   transport:\n    #     # dashboard控制台服务名 用于服务发现\n    #     # 如无此配置将默认使用下方 dashboard 配置直接注册\n    #     server-name: ruoyi-sentinel-dashboard\n    #     # 客户端指定注册的ip 用于多网卡ip不稳点使用\n    #     # client-ip:\n    #     # 控制台地址 从1.3.0开始使用 server-name 注册\n    #     # dashboard: localhost:8718\n\n  # redis通用配置 子服务可以自行配置进行覆盖\n  # redis:\n  #   host: 39.98.125.88\n  #   port: 6379\n  #   # 密码(如没有密码请注释掉)\n  #   # password:\n  #   database: 0\n  #   timeout: 10s\n  #   ssl: false\n\n\n# redisson 配置\n# redisson:\n#   # redis key前缀\n#   keyPrefix:\n#   # 线程池数量\n#   threads: 4\n#   # Netty线程池数量\n#   nettyThreads: 8\n#   # 单节点配置\n#   singleServerConfig:\n#     # 客户端名称\n#     clientName: ${spring.application.name}\n#     # 最小空闲连接数\n#     connectionMinimumIdleSize: 8\n#     # 连接池大小\n#     connectionPoolSize: 32\n#     # 连接空闲超时，单位：毫秒\n#     idleConnectionTimeout: 10000\n#     # 命令等待超时，单位：毫秒\n#     timeout: 3000\n#     # 发布和订阅连接池大小\n#     subscriptionConnectionPoolSize: 50\n    \n\n# springdoc 配置\nspringdoc:\n  api-docs:\n    # 是否开启接口文档\n    enabled: true\n  swagger-ui:\n    # 持久化认证数据\n    persistAuthorization: true\n\n\n# swagger 配置\nswagger:\n  enabled: true\n  title: Fly Swagger API\n  gateway: http://localhost:8080\n  token-url: ${swagger.gateway}/auth/oauth/token\n  scope: server\n  services:\n    flycloud-gateway: flycloud-gateway\n    flycloud-system: flycloud-system\n    flycloud-mall: flycloud-mall\n    flycloud-music: flycloud-music\n    flycloud-generator: flycloud-generator\n    flycloud-job: flycloud-job\n', 'b4169778452315dd011233670af19ff4', '2023-04-21 03:57:27', '2023-04-21 03:57:28', 'nacos', '112.94.103.26', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (1, 55, 'application-common.yaml', 'DEFAULT_GROUP', '', '\n# spring 配置\nspring:\n  # 资源信息\n  messages:\n    # 国际化资源文件路径\n    basename: i18n/messages\n  servlet:\n    multipart:\n      # 单个文件大小\n      max-file-size: 1000MB\n      # 设置总上传的文件大小\n      max-request-size: 5000MB\n  mvc:\n    format:\n      date-time: yyyy-MM-dd HH:mm:ss\n  #jackson配置\n  jackson:\n    # 日期格式化\n    date-format: yyyy-MM-dd HH:mm:ss\n    time-zone: GMT+8\n    serialization:\n      # 格式化输出\n      INDENT_OUTPUT: false\n      # 忽略无法转换的对象\n      fail_on_empty_beans: false\n    deserialization:\n      # 允许对象忽略json中不存在的属性\n      fail_on_unknown_properties: false\n  cloud:\n    # sentinel 配置\n    # sentinel:\n    #   # sentinel 开关\n    #   enabled: true\n    #   # 取消控制台懒加载\n    #   eager: true\n    #   transport:\n    #     # dashboard控制台服务名 用于服务发现\n    #     # 如无此配置将默认使用下方 dashboard 配置直接注册\n    #     server-name: ruoyi-sentinel-dashboard\n    #     # 客户端指定注册的ip 用于多网卡ip不稳点使用\n    #     # client-ip:\n    #     # 控制台地址 从1.3.0开始使用 server-name 注册\n    #     # dashboard: localhost:8718\n\n  # redis通用配置 子服务可以自行配置进行覆盖\n  # redis:\n  #   host: 39.98.125.88\n  #   port: 6379\n  #   # 密码(如没有密码请注释掉)\n  #   # password:\n  #   database: 0\n  #   timeout: 10s\n  #   ssl: false\n\n\n# redisson 配置\n# redisson:\n#   # redis key前缀\n#   keyPrefix:\n#   # 线程池数量\n#   threads: 4\n#   # Netty线程池数量\n#   nettyThreads: 8\n#   # 单节点配置\n#   singleServerConfig:\n#     # 客户端名称\n#     clientName: ${spring.application.name}\n#     # 最小空闲连接数\n#     connectionMinimumIdleSize: 8\n#     # 连接池大小\n#     connectionPoolSize: 32\n#     # 连接空闲超时，单位：毫秒\n#     idleConnectionTimeout: 10000\n#     # 命令等待超时，单位：毫秒\n#     timeout: 3000\n#     # 发布和订阅连接池大小\n#     subscriptionConnectionPoolSize: 50\n\n\n# MyBatisPlus配置  (https://baomidou.com/config/)\nmybatis-plus:\n  # 扫描mapper接口包有两种:\n  # todo 法1: 默认扫描(也就是加注解), 由于Springboot默认是在主类(@SpringBootApplication)所在的包名下扫描并注册bean, 即在mapper接口类加上注解@Mapper即可\n  # todo 法2: 手动扫描, 在相关启动配置类(如MybatisPlusConfig)加上@MapperScan(\"${mybatis-plus.mapperPackage}\" 即可\n  # 本项目用的是 法2 (因为基本上整个项目的包名前缀都是一样的,除非要注入第三方的bean); 如有需要支持多包可在注解配置 或 提升扫包等级 (例如 com.**.**.mapper)\n  mapperPackage: com.fly.**.mapper\n  # 对应的 XML 文件位置\n  mapperLocations: classpath*:mapper/**/*Mapper.xml\n  # 实体扫描，多个package用逗号或者分号分隔\n  typeAliasesPackage: com.fly.**.domain\n  # 启动时是否检查 MyBatis XML 文件的存在，默认不检查\n  checkConfigLocation: false\n  configuration:\n    # 自动驼峰命名规则（camel case）映射\n    mapUnderscoreToCamelCase: true\n    # MyBatis 自动映射策略\n    # NONE：不启用 PARTIAL：只对非嵌套 resultMap 自动映射 FULL：对所有 resultMap 自动映射\n    autoMappingBehavior: PARTIAL\n    # MyBatis 自动映射时未知列或未知属性处理策\n    # NONE：不做处理 WARNING：打印相关警告 FAILING：抛出异常和详细信息\n    autoMappingUnknownColumnBehavior: NONE\n    # 更详细的日志输出 会有性能损耗 org.apache.ibatis.logging.stdout.StdOutImpl\n    # 关闭日志记录 (可单纯使用 p6spy 分析) org.apache.ibatis.logging.nologging.NoLoggingImpl\n    # 默认日志输出 org.apache.ibatis.logging.slf4j.Slf4jImpl\n    logImpl: org.apache.ibatis.logging.nologging.NoLoggingImpl\n  global-config:\n    # 是否打印 Logo banner\n    banner: true\n    dbConfig:\n      # 主键类型\n      # AUTO 自增 NONE 空 INPUT 用户输入 ASSIGN_ID 雪花 ASSIGN_UUID 唯一 UUID\n      idType: ASSIGN_ID\n      # 逻辑已删除值\n      logicDeleteValue: 2\n      # 逻辑未删除值\n      logicNotDeleteValue: 0\n      insertStrategy: NOT_NULL\n      updateStrategy: NOT_NULL\n      where-strategy: NOT_NULL\n\n\n# 数据加密\nmybatis-encryptor:\n  # 是否开启加密\n  enable: false\n  # 默认加密算法\n  algorithm: BASE64\n  # 编码方式 BASE64/HEX。默认BASE64\n  encode: BASE64\n  # 安全秘钥 对称算法的秘钥 如：AES，SM4\n  password:\n  # 公私钥 非对称算法的公私钥 如：SM2，RSA\n  publicKey:\n  privateKey:\n  \n\n# springdoc 配置\nspringdoc:\n  api-docs:\n    # 是否开启接口文档\n    enabled: true\n  swagger-ui:\n    # 持久化认证数据\n    persistAuthorization: true\n\n\n# swagger 配置\nswagger:\n  enabled: true\n  title: Fly Swagger API\n  gateway: http://localhost:8080\n  token-url: ${swagger.gateway}/auth/oauth/token\n  scope: server\n  services:\n    flycloud-gateway: flycloud-gateway\n    flycloud-system: flycloud-system\n    flycloud-mall: flycloud-mall\n    flycloud-music: flycloud-music\n    flycloud-generator: flycloud-generator\n    flycloud-job: flycloud-job\n', '010cb8a2c9ceb4b6a4ed05a0e3c7a7f9', '2023-04-21 03:57:35', '2023-04-21 03:57:35', 'nacos', '112.94.103.26', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (33, 56, 'flycloud-system-dev.yaml', 'DEFAULT_GROUP', '', '\nspring:\n  datasource:\n    dynamic:\n      # 设置默认的数据源或者数据源组,默认值即为 master\n      primary: master\n      datasource:\n        # 主库数据源\n        master:\n          type: ${spring.datasource.type}\n          driver-class-name: com.mysql.cj.jdbc.Driver\n          url: ${datasource.system-master.url}\n          username: ${datasource.system-master.username}\n          password: ${datasource.system-master.password}\n\n\n#       其他数据库系统-参数说明:          \n#        oracle:\n#          type: ${spring.datasource.type}\n#          driverClassName: oracle.jdbc.OracleDriver\n#          url: ${datasource.system-oracle.url}\n#          username: ${datasource.system-oracle.username}\n#          password: ${datasource.system-oracle.password}\n#          hikari:\n#            connectionTestQuery: SELECT 1 FROM DUAL\n\n#        postgres:\n#          type: ${spring.datasource.type}\n#          driverClassName: org.postgresql.Driver\n#          url: ${datasource.system-postgres.url}\n#          username: ${datasource.system-postgres.username}\n#          password: ${datasource.system-postgres.password}\n', '6301cfe3dd2c8c6a82a07d305b4a9f13', '2023-04-21 04:02:07', '2023-04-21 04:02:08', 'nacos', '116.21.159.246', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (1, 57, 'application-common.yaml', 'DEFAULT_GROUP', '', '\n# spring 配置\nspring:\n  # 资源信息\n  messages:\n    # 国际化资源文件路径\n    basename: i18n/messages\n  servlet:\n    multipart:\n      # 单个文件大小\n      max-file-size: 1000MB\n      # 设置总上传的文件大小\n      max-request-size: 5000MB\n  mvc:\n    format:\n      date-time: yyyy-MM-dd HH:mm:ss\n  #jackson配置\n  jackson:\n    # 日期格式化\n    date-format: yyyy-MM-dd HH:mm:ss\n    time-zone: GMT+8\n    serialization:\n      # 格式化输出\n      INDENT_OUTPUT: false\n      # 忽略无法转换的对象\n      fail_on_empty_beans: false\n    deserialization:\n      # 允许对象忽略json中不存在的属性\n      fail_on_unknown_properties: false\n  cloud:\n    # sentinel 配置\n    # sentinel:\n    #   # sentinel 开关\n    #   enabled: true\n    #   # 取消控制台懒加载\n    #   eager: true\n    #   transport:\n    #     # dashboard控制台服务名 用于服务发现\n    #     # 如无此配置将默认使用下方 dashboard 配置直接注册\n    #     server-name: ruoyi-sentinel-dashboard\n    #     # 客户端指定注册的ip 用于多网卡ip不稳点使用\n    #     # client-ip:\n    #     # 控制台地址 从1.3.0开始使用 server-name 注册\n    #     # dashboard: localhost:8718\n\n  # redis通用配置 子服务可以自行配置进行覆盖\n  # redis:\n  #   host: 39.98.125.88\n  #   port: 6379\n  #   # 密码(如没有密码请注释掉)\n  #   # password:\n  #   database: 0\n  #   timeout: 10s\n  #   ssl: false\n\n\n# redisson 配置\n# redisson:\n#   # redis key前缀\n#   keyPrefix:\n#   # 线程池数量\n#   threads: 4\n#   # Netty线程池数量\n#   nettyThreads: 8\n#   # 单节点配置\n#   singleServerConfig:\n#     # 客户端名称\n#     clientName: ${spring.application.name}\n#     # 最小空闲连接数\n#     connectionMinimumIdleSize: 8\n#     # 连接池大小\n#     connectionPoolSize: 32\n#     # 连接空闲超时，单位：毫秒\n#     idleConnectionTimeout: 10000\n#     # 命令等待超时，单位：毫秒\n#     timeout: 3000\n#     # 发布和订阅连接池大小\n#     subscriptionConnectionPoolSize: 50\n\n\n# MyBatisPlus配置  (https://baomidou.com/config/)\nmybatis-plus:\n  # 扫描mapper接口包有两种:\n  # todo 法1: 默认扫描(也就是加注解), 由于Springboot默认是在主类(@SpringBootApplication)所在的包名下扫描并注册bean, 即在mapper接口类加上注解@Mapper即可\n  # todo 法2: 手动扫描, 在相关启动配置类(如MybatisPlusConfig)加上@MapperScan(\"${mybatis-plus.mapperPackage}\" 即可\n  # 本项目用的是 法2 (因为基本上整个项目的包名前缀都是一样的,除非要注入第三方的bean); 如有需要支持多包可在注解配置 或 提升扫包等级 (例如 com.**.**.mapper)\n  mapperPackage: com.fly.**.mapper\n  # 对应的 XML 文件位置\n  mapperLocations: classpath*:mapper/**/*Mapper.xml\n  # 实体扫描，多个package用逗号或者分号分隔\n  typeAliasesPackage: com.fly.**.domain\n  # 启动时是否检查 MyBatis XML 文件的存在，默认不检查\n  checkConfigLocation: false\n  configuration:\n    # 自动驼峰命名规则（camel case）映射\n    mapUnderscoreToCamelCase: true\n    # MyBatis 自动映射策略\n    # NONE：不启用 PARTIAL：只对非嵌套 resultMap 自动映射 FULL：对所有 resultMap 自动映射\n    autoMappingBehavior: PARTIAL\n    # MyBatis 自动映射时未知列或未知属性处理策\n    # NONE：不做处理 WARNING：打印相关警告 FAILING：抛出异常和详细信息\n    autoMappingUnknownColumnBehavior: NONE\n    # 更详细的日志输出 会有性能损耗 org.apache.ibatis.logging.stdout.StdOutImpl\n    # 关闭日志记录 (可单纯使用 p6spy 分析) org.apache.ibatis.logging.nologging.NoLoggingImpl\n    # 默认日志输出 org.apache.ibatis.logging.slf4j.Slf4jImpl\n    logImpl: org.apache.ibatis.logging.nologging.NoLoggingImpl\n  global-config:\n    # 是否打印 Logo banner\n    banner: true\n    dbConfig:\n      # 主键类型\n      # AUTO 自增 NONE 空 INPUT 用户输入 ASSIGN_ID 雪花 ASSIGN_UUID 唯一 UUID\n      idType: ASSIGN_ID\n      # 逻辑已删除值\n      logicDeleteValue: 2\n      # 逻辑未删除值\n      logicNotDeleteValue: 0\n      insertStrategy: NOT_NULL\n      updateStrategy: NOT_NULL\n      where-strategy: NOT_NULL\n\n\n# 数据加密\nmybatis-encryptor:\n  # 是否开启加密\n  enable: false\n  # 默认加密算法\n  algorithm: BASE64\n  # 编码方式 BASE64/HEX。默认BASE64\n  encode: BASE64\n  # 安全秘钥 对称算法的秘钥 如：AES，SM4\n  password:\n  # 公私钥 非对称算法的公私钥 如：SM2，RSA\n  publicKey:\n  privateKey:\n  \n\n# springdoc 配置\nspringdoc:\n  api-docs:\n    # 是否开启接口文档\n    enabled: true\n  swagger-ui:\n    # 持久化认证数据\n    persistAuthorization: true\n\n\n# swagger 配置\nswagger:\n  enabled: true\n  title: Fly Swagger API\n  gateway: http://localhost:8080\n  token-url: ${swagger.gateway}/auth/oauth/token\n  scope: server\n  services:\n    flycloud-gateway: flycloud-gateway\n    flycloud-system: flycloud-system\n    flycloud-mall: flycloud-mall\n    flycloud-music: flycloud-music\n    flycloud-generator: flycloud-generator\n    flycloud-job: flycloud-job\n', '010cb8a2c9ceb4b6a4ed05a0e3c7a7f9', '2023-04-21 04:04:54', '2023-04-21 04:04:55', 'nacos', '120.85.113.241', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (29, 58, 'application-datasource.yaml', 'DEFAULT_GROUP', '', '\n# 数据源连接 配置\ndatasource:\n\n  # 系统模块的-主库数据源 (根据需求配置-从库数据源)\n  system-master:\n    # jdbc 所有参数配置参考 https://lionli.blog.csdn.net/article/details/122018562\n    # rewriteBatchedStatements=true 批处理优化 大幅提升批量插入更新删除性能\n    url: jdbc:mysql://localhost:3306/fly-cloud?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: 123456\n  # system-slave:\n\n  # 商城模块的-主库数据源\n  mall-master:\n    url: jdbc:mysql://localhost:3306/fly-mall?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: 123456\n\n  # 音乐模块的-主库数据源\n  music-master:\n    url: jdbc:mysql://localhost:3306/fly-music?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: 123456\n\n  # 定时任务数据库\n  job:\n    url: jdbc:mysql://localhost:3306/fly-job?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: 123456\n\n  # 自动生成数据库说明: 由于要自动生成某个数据库的表信息, 所以只需要指向你要生成的已经在使用的数据库即可\n  gen:\n    url: jdbc:mysql://localhost:3306/fly-cloud?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: 123456\n    \n#  其他数据库系统说明\n#  system-oracle:\n#    url: jdbc:oracle:thin:@//localhost:1521/XE\n#    username: ROOT\n#    password: password\n\n#  system-postgres:\n#    url: jdbc:postgresql://localhost:5432/postgres?useUnicode=true&characterEncoding=utf8&useSSL=true&autoReconnect=true&reWriteBatchedInserts=true\n#    username: root\n#    password: password\n\n\n# 数据源属性 配置\nspring:\n  datasource:\n    type: com.zaxxer.hikari.HikariDataSource\n    # 动态数据源文档 https://www.kancloud.cn/tracy5546/dynamic-datasource/content\n    dynamic:\n      # 性能分析插件(有性能损耗 不建议生产环境使用)\n      p6spy: true\n      # 开启seata代理，开启后默认每个数据源都代理，如果某个不需要代理可单独关闭\n      # seata: false\n      # 严格模式 匹配不到数据源则报错\n      strict: true\n      hikari:\n        # 最大连接池数量\n        maxPoolSize: 20\n        # 最小空闲线程数量\n        minIdle: 10\n        # 配置获取连接等待超时的时间\n        connectionTimeout: 30000\n        # 校验超时时间\n        validationTimeout: 5000\n        # 空闲连接存活最大时间，默认10分钟\n        idleTimeout: 600000\n        # 此属性控制池中连接的最长生命周期，值0表示无限生命周期，默认30分钟\n        maxLifetime: 1800000\n        # 连接测试query（配置检测连接是否有效）\n        connectionTestQuery: SELECT 1\n        # 多久检查一次连接的活性\n        keepaliveTime: 30000\n\n\n# seata配置\nseata:\n  # 关闭自动代理\n  enable-auto-data-source-proxy: false\n\n', '168dde9935e9bd0e7dbc924765e4d90c', '2023-04-21 04:07:21', '2023-04-21 04:07:22', 'nacos', '120.85.113.241', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (33, 59, 'flycloud-system-dev.yaml', 'DEFAULT_GROUP', '', '\nspring:\n  datasource:\n    dynamic:\n      # 设置默认的数据源或者数据源组,默认值即为 master\n      primary: master\n      datasource:\n        # 主库数据源\n        master:\n          type: ${spring.datasource.type}\n          driver-class-name: com.mysql.cj.jdbc.Driver\n          url: ${datasource.system-master.url}\n          username: ${datasource.system-master.username}\n          password: ${datasource.system-master.password}\n\n\n#       其他数据库系统-参数说明:          \n#        oracle:\n#          type: ${spring.datasource.type}\n#          driverClassName: oracle.jdbc.OracleDriver\n#          url: ${datasource.system-oracle.url}\n#          username: ${datasource.system-oracle.username}\n#          password: ${datasource.system-oracle.password}\n#          hikari:\n#            connectionTestQuery: SELECT 1 FROM DUAL\n\n#        postgres:\n#          type: ${spring.datasource.type}\n#          driverClassName: org.postgresql.Driver\n#          url: ${datasource.system-postgres.url}\n#          username: ${datasource.system-postgres.username}\n#          password: ${datasource.system-postgres.password}\n\n# MyBatisPlus配置  (https://baomidou.com/config/)\nmybatis-plus:\n  # 扫描mapper接口包有两种:\n  # todo 法1: 默认扫描(也就是加注解), 由于Springboot默认是在主类(@SpringBootApplication)所在的包名下扫描并注册bean, 即在mapper接口类加上注解@Mapper即可\n  # todo 法2: 手动扫描, 在相关启动配置类(如MybatisPlusConfig)加上@MapperScan(\"${mybatis-plus.mapperPackage}\" 即可\n  # 本项目用的是 法2 (因为基本上整个项目的包名前缀都是一样的,除非要注入第三方的bean); 如有需要支持多包可在注解配置 或 提升扫包等级 (例如 com.**.**.mapper)\n  mapperPackage: com.fly.**.mapper\n  # 对应的 XML 文件位置\n  mapperLocations: classpath*:mapper/**/*Mapper.xml\n  # 实体扫描，多个package用逗号或者分号分隔\n  typeAliasesPackage: com.fly.**.domain\n  # 启动时是否检查 MyBatis XML 文件的存在，默认不检查\n  checkConfigLocation: false\n  configuration:\n    # 自动驼峰命名规则（camel case）映射\n    mapUnderscoreToCamelCase: true\n    # MyBatis 自动映射策略\n    # NONE：不启用 PARTIAL：只对非嵌套 resultMap 自动映射 FULL：对所有 resultMap 自动映射\n    autoMappingBehavior: PARTIAL\n    # MyBatis 自动映射时未知列或未知属性处理策\n    # NONE：不做处理 WARNING：打印相关警告 FAILING：抛出异常和详细信息\n    autoMappingUnknownColumnBehavior: NONE\n    # 更详细的日志输出 会有性能损耗 org.apache.ibatis.logging.stdout.StdOutImpl\n    # 关闭日志记录 (可单纯使用 p6spy 分析) org.apache.ibatis.logging.nologging.NoLoggingImpl\n    # 默认日志输出 org.apache.ibatis.logging.slf4j.Slf4jImpl\n    logImpl: org.apache.ibatis.logging.nologging.NoLoggingImpl\n  global-config:\n    # 是否打印 Logo banner\n    banner: true\n    dbConfig:\n      # 主键类型\n      # AUTO 自增 NONE 空 INPUT 用户输入 ASSIGN_ID 雪花 ASSIGN_UUID 唯一 UUID\n      idType: ASSIGN_ID\n      # 逻辑已删除值\n      logicDeleteValue: 2\n      # 逻辑未删除值\n      logicNotDeleteValue: 0\n      insertStrategy: NOT_NULL\n      updateStrategy: NOT_NULL\n      where-strategy: NOT_NULL', '42eb816db009822097aee6dd208fb7fb', '2023-04-21 04:14:08', '2023-04-21 04:14:08', 'nacos', '112.94.103.26', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (33, 60, 'flycloud-system-dev.yaml', 'DEFAULT_GROUP', '', '\nspring:\n  datasource:\n    dynamic:\n      # 设置默认的数据源或者数据源组,默认值即为 master\n      primary: master\n      datasource:\n        # 主库数据源\n        master:\n          type: ${spring.datasource.type}\n          driver-class-name: com.mysql.cj.jdbc.Driver\n          url: ${datasource.system-master.url}\n          username: ${datasource.system-master.username}\n          password: ${datasource.system-master.password}\n\n\n#       其他数据库系统-参数说明:          \n#        oracle:\n#          type: ${spring.datasource.type}\n#          driverClassName: oracle.jdbc.OracleDriver\n#          url: ${datasource.system-oracle.url}\n#          username: ${datasource.system-oracle.username}\n#          password: ${datasource.system-oracle.password}\n#          hikari:\n#            connectionTestQuery: SELECT 1 FROM DUAL\n\n#        postgres:\n#          type: ${spring.datasource.type}\n#          driverClassName: org.postgresql.Driver\n#          url: ${datasource.system-postgres.url}\n#          username: ${datasource.system-postgres.username}\n#          password: ${datasource.system-postgres.password}\n\n# MyBatisPlus配置  (https://baomidou.com/config/)\nmybatis-plus:\n  # 扫描mapper接口包有两种: (法1: 默认扫描(也就是加@Mapper注解);  法2: 手动扫描, 在相关启动配置类加上@MapperScan(\"要扫描包的路径\"),  \n  # 本项目用的是 法2 (因为基本上整个项目的包名前缀都是一样的,除非要注入第三方的bean); 如有需要支持多包可在注解配置 或 提升扫包等级 (例如 com.**.**.mapper)\n  mapperPackage: com.fly.**.mapper\n  # 对应的 XML 文件位置\n  mapperLocations: classpath*:mapper/**/*Mapper.xml\n  # 实体扫描，多个package用逗号或者分号分隔\n  typeAliasesPackage: com.fly.**.domain\n  # 启动时是否检查 MyBatis XML 文件的存在，默认不检查\n  checkConfigLocation: false\n  configuration:\n    # 自动驼峰命名规则（camel case）映射\n    mapUnderscoreToCamelCase: true\n    # MyBatis 自动映射策略\n    # NONE：不启用 PARTIAL：只对非嵌套 resultMap 自动映射 FULL：对所有 resultMap 自动映射\n    autoMappingBehavior: PARTIAL\n    # MyBatis 自动映射时未知列或未知属性处理策\n    # NONE：不做处理 WARNING：打印相关警告 FAILING：抛出异常和详细信息\n    autoMappingUnknownColumnBehavior: NONE\n    # 更详细的日志输出 会有性能损耗 org.apache.ibatis.logging.stdout.StdOutImpl\n    # 关闭日志记录 (可单纯使用 p6spy 分析) org.apache.ibatis.logging.nologging.NoLoggingImpl\n    # 默认日志输出 org.apache.ibatis.logging.slf4j.Slf4jImpl\n    logImpl: org.apache.ibatis.logging.nologging.NoLoggingImpl\n  global-config:\n    # 是否打印 Logo banner\n    banner: true\n    dbConfig:\n      # 主键类型\n      # AUTO 自增 NONE 空 INPUT 用户输入 ASSIGN_ID 雪花 ASSIGN_UUID 唯一 UUID\n      idType: ASSIGN_ID\n      # 逻辑已删除值\n      logicDeleteValue: 2\n      # 逻辑未删除值\n      logicNotDeleteValue: 0\n      insertStrategy: NOT_NULL\n      updateStrategy: NOT_NULL\n      where-strategy: NOT_NULL', 'dd0eeb12d927118d6c9c721122de09a8', '2023-04-21 04:14:41', '2023-04-21 04:14:41', 'nacos', '112.94.103.26', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (33, 61, 'flycloud-system-dev.yaml', 'DEFAULT_GROUP', '', '\nspring:\n  datasource:\n    dynamic:\n      # 设置默认的数据源或者数据源组,默认值即为 master\n      primary: master\n      datasource:\n        # 主库数据源\n        master:\n          type: ${spring.datasource.type}\n          driver-class-name: com.mysql.cj.jdbc.Driver\n          url: ${datasource.system-master.url}\n          username: ${datasource.system-master.username}\n          password: ${datasource.system-master.password}\n\n\n#       其他数据库系统-参数说明:          \n#        oracle:\n#          type: ${spring.datasource.type}\n#          driverClassName: oracle.jdbc.OracleDriver\n#          url: ${datasource.system-oracle.url}\n#          username: ${datasource.system-oracle.username}\n#          password: ${datasource.system-oracle.password}\n#          hikari:\n#            connectionTestQuery: SELECT 1 FROM DUAL\n\n#        postgres:\n#          type: ${spring.datasource.type}\n#          driverClassName: org.postgresql.Driver\n#          url: ${datasource.system-postgres.url}\n#          username: ${datasource.system-postgres.username}\n#          password: ${datasource.system-postgres.password}\n\n# MyBatisPlus配置  (https://baomidou.com/config/)\nmybatis-plus:\n  # 扫描mapper接口包有两种: (法1: 默认扫描(也就是加@Mapper注解);  法2: 手动扫描, 在相关启动配置类加上@MapperScan(\"要扫描包的路径\"),  \n  # 本项目用的是 法2 (因为基本上整个项目的包名前缀都是一样的,除非要注入第三方的bean); 如有需要支持多包可在注解配置 或 提升扫包等级 (例如 com.**.**.mapper)\n  mapperPackage: com.fly.**.mapper\n  # 对应的 XML 文件位置\n  mapperLocations: classpath*:mapper/**/*Mapper.xml\n  # 实体扫描，多个package用逗号或者分号分隔\n  typeAliasesPackage: com.fly.**.domain\n  # 启动时是否检查 MyBatis XML 文件的存在，默认不检查\n  checkConfigLocation: false\n  configuration:\n    # 自动驼峰命名规则（camel case）映射\n    mapUnderscoreToCamelCase: true\n    # MyBatis 自动映射策略\n    # NONE：不启用 PARTIAL：只对非嵌套 resultMap 自动映射 FULL：对所有 resultMap 自动映射\n    autoMappingBehavior: PARTIAL\n    # MyBatis 自动映射时未知列或未知属性处理策\n    # NONE：不做处理 WARNING：打印相关警告 FAILING：抛出异常和详细信息\n    autoMappingUnknownColumnBehavior: NONE\n    # 更详细的日志输出 会有性能损耗 org.apache.ibatis.logging.stdout.StdOutImpl\n    # 关闭日志记录 (可单纯使用 p6spy 分析) org.apache.ibatis.logging.nologging.NoLoggingImpl\n    # 默认日志输出 org.apache.ibatis.logging.slf4j.Slf4jImpl\n    logImpl: org.apache.ibatis.logging.nologging.NoLoggingImpl\n  global-config:\n    # 是否打印 Logo banner\n    banner: true\n    dbConfig:\n      # 主键类型\n      # AUTO 自增 NONE 空 INPUT 用户输入 ASSIGN_ID 雪花 ASSIGN_UUID 唯一 UUID\n      idType: ASSIGN_ID\n      # 逻辑已删除值\n      logicDeleteValue: 2\n      # 逻辑未删除值\n      logicNotDeleteValue: 0\n      insertStrategy: NOT_NULL\n      updateStrategy: NOT_NULL\n      where-strategy: NOT_NULL', 'dd0eeb12d927118d6c9c721122de09a8', '2023-04-21 11:31:25', '2023-04-21 11:31:26', 'nacos', '120.85.114.151', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (33, 62, 'flycloud-system-dev.yaml', 'DEFAULT_GROUP', '', '\nspring:\n  datasource:\n    dynamic:\n      # 设置默认的数据源或者数据源组,默认值即为 master\n      primary: master\n      datasource:\n        # 主库数据源\n        master:\n          type: ${spring.datasource.type}\n          driver-class-name: com.mysql.cj.jdbc.Driver\n          url: ${datasource.system-master.url}\n          username: ${datasource.system-master.username}\n          password: ${datasource.system-master.password}\n\n\n#       其他数据库系统-参数说明:          \n#        oracle:\n#          type: ${spring.datasource.type}\n#          driverClassName: oracle.jdbc.OracleDriver\n#          url: ${datasource.system-oracle.url}\n#          username: ${datasource.system-oracle.username}\n#          password: ${datasource.system-oracle.password}\n#          hikari:\n#            connectionTestQuery: SELECT 1 FROM DUAL\n\n#        postgres:\n#          type: ${spring.datasource.type}\n#          driverClassName: org.postgresql.Driver\n#          url: ${datasource.system-postgres.url}\n#          username: ${datasource.system-postgres.username}\n#          password: ${datasource.system-postgres.password}\n\n# MyBatisPlus配置  (https://baomidou.com/config/)\nmybatis-plus:\n  # 扫描mapper接口包有两种: (法1: 默认扫描(也就是加@Mapper注解);  法2: 手动扫描, 在相关启动配置类加上@MapperScan(\"要扫描包的路径\"),  \n  # 本项目用的是 法2 (因为基本上整个项目的包名前缀都是一样的,除非要注入第三方的bean); 如有需要支持多包可在注解配置 或 提升扫包等级 (例如 com.**.**.mapper)\n  mapperPackage: com.fly.**.mapper\n  # 对应的 XML 文件位置\n  mapperLocations: classpath*:mapper/**/*Mapper.xml\n  # 实体扫描，多个package用逗号或者分号分隔\n  typeAliasesPackage: com.fly.**.domain\n  # 启动时是否检查 MyBatis XML 文件的存在，默认不检查\n  checkConfigLocation: false\n  configuration:\n    # 自动驼峰命名规则（camel case）映射\n    mapUnderscoreToCamelCase: true\n    # MyBatis 自动映射策略\n    # NONE：不启用 PARTIAL：只对非嵌套 resultMap 自动映射 FULL：对所有 resultMap 自动映射\n    autoMappingBehavior: PARTIAL\n    # MyBatis 自动映射时未知列或未知属性处理策\n    # NONE：不做处理 WARNING：打印相关警告 FAILING：抛出异常和详细信息\n    autoMappingUnknownColumnBehavior: NONE\n    # 更详细的日志输出 会有性能损耗 org.apache.ibatis.logging.stdout.StdOutImpl\n    # 关闭日志记录 (可单纯使用 p6spy 分析) org.apache.ibatis.logging.nologging.NoLoggingImpl\n    # 默认日志输出 org.apache.ibatis.logging.slf4j.Slf4jImpl\n    # logImpl: org.apache.ibatis.logging.nologging.NoLoggingImpl\n  global-config:\n    # 是否打印 Logo banner\n    banner: true\n    dbConfig:\n      # 主键类型\n      # AUTO 自增 NONE 空 INPUT 用户输入 ASSIGN_ID 雪花 ASSIGN_UUID 唯一 UUID\n      idType: ASSIGN_ID\n      # 逻辑已删除值\n      logicDeleteValue: 2\n      # 逻辑未删除值\n      logicNotDeleteValue: 0\n      insertStrategy: NOT_NULL\n      updateStrategy: NOT_NULL\n      where-strategy: NOT_NULL', 'c6dfe45552b2b47c316582254e2e1e19', '2023-04-21 11:36:01', '2023-04-21 11:36:01', 'nacos', '120.85.114.63', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (33, 63, 'flycloud-system-dev.yaml', 'DEFAULT_GROUP', '', '\nspring:\n  datasource:\n    dynamic:\n      # 设置默认的数据源或者数据源组,默认值即为 master\n      primary: master\n      datasource:\n        # 主库数据源\n        master:\n          type: ${spring.datasource.type}\n          driver-class-name: com.mysql.cj.jdbc.Driver\n          url: ${datasource.system-master.url}\n          username: ${datasource.system-master.username}\n          password: ${datasource.system-master.password}\n\n\n#       其他数据库系统-参数说明:          \n#        oracle:\n#          type: ${spring.datasource.type}\n#          driverClassName: oracle.jdbc.OracleDriver\n#          url: ${datasource.system-oracle.url}\n#          username: ${datasource.system-oracle.username}\n#          password: ${datasource.system-oracle.password}\n#          hikari:\n#            connectionTestQuery: SELECT 1 FROM DUAL\n\n#        postgres:\n#          type: ${spring.datasource.type}\n#          driverClassName: org.postgresql.Driver\n#          url: ${datasource.system-postgres.url}\n#          username: ${datasource.system-postgres.username}\n#          password: ${datasource.system-postgres.password}\n\n# MyBatisPlus配置  (https://baomidou.com/config/)\nmybatis-plus:\n  # 扫描mapper接口包有两种: (法1: 默认扫描(也就是加@Mapper注解);  法2: 手动扫描, 在相关启动配置类加上@MapperScan(\"要扫描包的路径\"),  \n  # 本项目用的是 法2 (因为基本上整个项目的包名前缀都是一样的,除非要注入第三方的bean); 如有需要支持多包可在注解配置 或 提升扫包等级 (例如 com.**.**.mapper)\n  mapperPackage: com.fly.**.mapper\n  # 对应的 XML 文件位置\n  mapperLocations: classpath*:mapper/**/*Mapper.xml\n  # 实体扫描，多个package用逗号或者分号分隔\n  typeAliasesPackage: com.fly.**.domain\n  # 启动时是否检查 MyBatis XML 文件的存在，默认不检查\n  checkConfigLocation: false\n  configuration:\n    # 自动驼峰命名规则（camel case）映射\n    mapUnderscoreToCamelCase: true\n    # MyBatis 自动映射策略\n    # NONE：不启用 PARTIAL：只对非嵌套 resultMap 自动映射 FULL：对所有 resultMap 自动映射\n    autoMappingBehavior: PARTIAL\n    # MyBatis 自动映射时未知列或未知属性处理策\n    # NONE：不做处理 WARNING：打印相关警告 FAILING：抛出异常和详细信息\n    autoMappingUnknownColumnBehavior: NONE\n    # 更详细的日志输出 会有性能损耗 org.apache.ibatis.logging.stdout.StdOutImpl\n    # 关闭日志记录 (可单纯使用 p6spy 分析) org.apache.ibatis.logging.nologging.NoLoggingImpl\n    # 默认日志输出 org.apache.ibatis.logging.slf4j.Slf4jImpl\n    logImpl: org.apache.ibatis.logging.nologging.NoLoggingImpl\n  global-config:\n    # 是否打印 Logo banner\n    banner: true\n    dbConfig:\n      # 主键类型\n      # AUTO 自增 NONE 空 INPUT 用户输入 ASSIGN_ID 雪花 ASSIGN_UUID 唯一 UUID\n      idType: ASSIGN_ID\n      # 逻辑已删除值\n      logicDeleteValue: 2\n      # 逻辑未删除值\n      logicNotDeleteValue: 0\n      insertStrategy: NOT_NULL\n      updateStrategy: NOT_NULL\n      where-strategy: NOT_NULL', 'dd0eeb12d927118d6c9c721122de09a8', '2023-04-21 11:39:41', '2023-04-21 11:39:41', 'nacos', '120.85.113.241', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (29, 64, 'application-datasource.yaml', 'DEFAULT_GROUP', '', '\n# 数据源连接 配置\ndatasource:\n\n  # 系统模块的-主库数据源 (根据需求配置-从库数据源)\n  system-master:\n    # jdbc 所有参数配置参考 https://lionli.blog.csdn.net/article/details/122018562\n    # rewriteBatchedStatements=true 批处理优化 大幅提升批量插入更新删除性能\n    url: jdbc:mysql://localhost:3306/fly-cloud?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: 123456\n  # system-slave:\n\n  # 商城模块的-主库数据源\n  mall-master:\n    url: jdbc:mysql://localhost:3306/fly-mall?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: 123456\n\n  # 音乐模块的-主库数据源\n  music-master:\n    url: jdbc:mysql://localhost:3306/fly-music?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: 123456\n\n  # 定时任务数据库\n  job:\n    url: jdbc:mysql://localhost:3306/fly-job?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: 123456\n\n  # 自动生成数据库说明: 由于要自动生成某个数据库的表信息, 所以只需要指向你要生成的已经在使用的数据库即可\n  gen:\n    url: jdbc:mysql://localhost:3306/fly-cloud?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: 123456\n    \n#  其他数据库系统说明\n#  system-oracle:\n#    url: jdbc:oracle:thin:@//localhost:1521/XE\n#    username: ROOT\n#    password: password\n\n#  system-postgres:\n#    url: jdbc:postgresql://localhost:5432/postgres?useUnicode=true&characterEncoding=utf8&useSSL=true&autoReconnect=true&reWriteBatchedInserts=true\n#    username: root\n#    password: password\n\n\n# 数据源属性 配置\nspring:\n  datasource:\n    type: com.zaxxer.hikari.HikariDataSource\n    # 动态数据源文档 https://www.kancloud.cn/tracy5546/dynamic-datasource/content\n    dynamic:\n      # 性能分析插件(有性能损耗 不建议生产环境使用)\n      p6spy: false\n      # 开启seata代理，开启后默认每个数据源都代理，如果某个不需要代理可单独关闭\n      # seata: false\n      # 严格模式 匹配不到数据源则报错\n      strict: true\n      hikari:\n        # 最大连接池数量\n        maxPoolSize: 20\n        # 最小空闲线程数量\n        minIdle: 10\n        # 配置获取连接等待超时的时间\n        connectionTimeout: 30000\n        # 校验超时时间\n        validationTimeout: 5000\n        # 空闲连接存活最大时间，默认10分钟\n        idleTimeout: 600000\n        # 此属性控制池中连接的最长生命周期，值0表示无限生命周期，默认30分钟\n        maxLifetime: 1800000\n        # 连接测试query（配置检测连接是否有效）\n        connectionTestQuery: SELECT 1\n        # 多久检查一次连接的活性\n        keepaliveTime: 30000\n\n\n# seata配置\nseata:\n  # 关闭自动代理\n  enable-auto-data-source-proxy: false\n\n', '2eb0240fc88ffb37e4f33222cd281de0', '2023-04-21 11:39:59', '2023-04-21 11:39:59', 'nacos', '120.85.113.241', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (1, 65, 'application-common.yaml', 'DEFAULT_GROUP', '', '\n# spring 配置\nspring:\n  # 资源信息\n  messages:\n    # 国际化资源文件路径\n    basename: i18n/messages\n  servlet:\n    multipart:\n      # 单个文件大小\n      max-file-size: 1000MB\n      # 设置总上传的文件大小\n      max-request-size: 5000MB\n  mvc:\n    format:\n      date-time: yyyy-MM-dd HH:mm:ss\n  #jackson配置\n  jackson:\n    # 日期格式化\n    date-format: yyyy-MM-dd HH:mm:ss\n    time-zone: GMT+8\n    serialization:\n      # 格式化输出\n      INDENT_OUTPUT: false\n      # 忽略无法转换的对象\n      fail_on_empty_beans: false\n    deserialization:\n      # 允许对象忽略json中不存在的属性\n      fail_on_unknown_properties: false\n  cloud:\n    # sentinel 配置\n    # sentinel:\n    #   # sentinel 开关\n    #   enabled: true\n    #   # 取消控制台懒加载\n    #   eager: true\n    #   transport:\n    #     # dashboard控制台服务名 用于服务发现\n    #     # 如无此配置将默认使用下方 dashboard 配置直接注册\n    #     server-name: ruoyi-sentinel-dashboard\n    #     # 客户端指定注册的ip 用于多网卡ip不稳点使用\n    #     # client-ip:\n    #     # 控制台地址 从1.3.0开始使用 server-name 注册\n    #     # dashboard: localhost:8718\n\n  # redis通用配置 子服务可以自行配置进行覆盖\n  # redis:\n  #   host: 39.98.125.88\n  #   port: 6379\n  #   # 密码(如没有密码请注释掉)\n  #   # password:\n  #   database: 0\n  #   timeout: 10s\n  #   ssl: false\n\n\n# redisson 配置\n# redisson:\n#   # redis key前缀\n#   keyPrefix:\n#   # 线程池数量\n#   threads: 4\n#   # Netty线程池数量\n#   nettyThreads: 8\n#   # 单节点配置\n#   singleServerConfig:\n#     # 客户端名称\n#     clientName: ${spring.application.name}\n#     # 最小空闲连接数\n#     connectionMinimumIdleSize: 8\n#     # 连接池大小\n#     connectionPoolSize: 32\n#     # 连接空闲超时，单位：毫秒\n#     idleConnectionTimeout: 10000\n#     # 命令等待超时，单位：毫秒\n#     timeout: 3000\n#     # 发布和订阅连接池大小\n#     subscriptionConnectionPoolSize: 50\n\n\n# # MyBatisPlus配置  (https://baomidou.com/config/)\n# mybatis-plus:\n#   # 扫描mapper接口包有两种:\n#   # todo 法1: 默认扫描(也就是加注解), 由于Springboot默认是在主类(@SpringBootApplication)所在的包名下扫描并注册bean, 即在mapper接口类加上注解@Mapper即可\n#   # todo 法2: 手动扫描, 在相关启动配置类(如MybatisPlusConfig)加上@MapperScan(\"${mybatis-plus.mapperPackage}\" 即可\n#   # 本项目用的是 法2 (因为基本上整个项目的包名前缀都是一样的,除非要注入第三方的bean); 如有需要支持多包可在注解配置 或 提升扫包等级 (例如 com.**.**.mapper)\n#   mapperPackage: com.fly.**.mapper\n#   # 对应的 XML 文件位置\n#   mapperLocations: classpath*:mapper/**/*Mapper.xml\n#   # 实体扫描，多个package用逗号或者分号分隔\n#   typeAliasesPackage: com.fly.**.domain\n#   # 启动时是否检查 MyBatis XML 文件的存在，默认不检查\n#   checkConfigLocation: false\n#   configuration:\n#     # 自动驼峰命名规则（camel case）映射\n#     mapUnderscoreToCamelCase: true\n#     # MyBatis 自动映射策略\n#     # NONE：不启用 PARTIAL：只对非嵌套 resultMap 自动映射 FULL：对所有 resultMap 自动映射\n#     autoMappingBehavior: PARTIAL\n#     # MyBatis 自动映射时未知列或未知属性处理策\n#     # NONE：不做处理 WARNING：打印相关警告 FAILING：抛出异常和详细信息\n#     autoMappingUnknownColumnBehavior: NONE\n#     # 更详细的日志输出 会有性能损耗 org.apache.ibatis.logging.stdout.StdOutImpl\n#     # 关闭日志记录 (可单纯使用 p6spy 分析) org.apache.ibatis.logging.nologging.NoLoggingImpl\n#     # 默认日志输出 org.apache.ibatis.logging.slf4j.Slf4jImpl\n#     logImpl: org.apache.ibatis.logging.nologging.NoLoggingImpl\n#   global-config:\n#     # 是否打印 Logo banner\n#     banner: true\n#     dbConfig:\n#       # 主键类型\n#       # AUTO 自增 NONE 空 INPUT 用户输入 ASSIGN_ID 雪花 ASSIGN_UUID 唯一 UUID\n#       idType: ASSIGN_ID\n#       # 逻辑已删除值\n#       logicDeleteValue: 2\n#       # 逻辑未删除值\n#       logicNotDeleteValue: 0\n#       insertStrategy: NOT_NULL\n#       updateStrategy: NOT_NULL\n#       where-strategy: NOT_NULL\n\n\n# 数据加密\nmybatis-encryptor:\n  # 是否开启加密\n  enable: false\n  # 默认加密算法\n  algorithm: BASE64\n  # 编码方式 BASE64/HEX。默认BASE64\n  encode: BASE64\n  # 安全秘钥 对称算法的秘钥 如：AES，SM4\n  password:\n  # 公私钥 非对称算法的公私钥 如：SM2，RSA\n  publicKey:\n  privateKey:\n  \n\n# springdoc 配置\nspringdoc:\n  api-docs:\n    # 是否开启接口文档\n    enabled: true\n  swagger-ui:\n    # 持久化认证数据\n    persistAuthorization: true\n\n\n# swagger 配置\nswagger:\n  enabled: true\n  title: Fly Swagger API\n  gateway: http://localhost:8080\n  token-url: ${swagger.gateway}/auth/oauth/token\n  scope: server\n  services:\n    flycloud-gateway: flycloud-gateway\n    flycloud-system: flycloud-system\n    flycloud-mall: flycloud-mall\n    flycloud-music: flycloud-music\n    flycloud-generator: flycloud-generator\n    flycloud-job: flycloud-job\n', '3288d7407eadbeaf5616e5e9df76467e', '2023-04-21 11:40:26', '2023-04-21 11:40:26', 'nacos', '120.85.113.241', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (29, 66, 'application-datasource.yaml', 'DEFAULT_GROUP', '', '\n# 数据源连接 配置\ndatasource:\n\n  # 系统模块的-主库数据源 (根据需求配置-从库数据源)\n  system-master:\n    # jdbc 所有参数配置参考 https://lionli.blog.csdn.net/article/details/122018562\n    # rewriteBatchedStatements=true 批处理优化 大幅提升批量插入更新删除性能\n    url: jdbc:mysql://localhost:3306/fly-cloud?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: 123456\n  # system-slave:\n\n  # 商城模块的-主库数据源\n  mall-master:\n    url: jdbc:mysql://localhost:3306/fly-mall?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: 123456\n\n  # 音乐模块的-主库数据源\n  music-master:\n    url: jdbc:mysql://localhost:3306/fly-music?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: 123456\n\n  # 定时任务数据库\n  job:\n    url: jdbc:mysql://localhost:3306/fly-job?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: 123456\n\n  # 自动生成数据库说明: 由于要自动生成某个数据库的表信息, 所以只需要指向你要生成的已经在使用的数据库即可\n  gen:\n    url: jdbc:mysql://localhost:3306/fly-cloud?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true\n    username: root\n    password: 123456\n    \n#  其他数据库系统说明\n#  system-oracle:\n#    url: jdbc:oracle:thin:@//localhost:1521/XE\n#    username: ROOT\n#    password: password\n\n#  system-postgres:\n#    url: jdbc:postgresql://localhost:5432/postgres?useUnicode=true&characterEncoding=utf8&useSSL=true&autoReconnect=true&reWriteBatchedInserts=true\n#    username: root\n#    password: password\n\n\n# 数据源属性 配置\nspring:\n  datasource:\n    type: com.zaxxer.hikari.HikariDataSource\n    # 动态数据源文档 https://www.kancloud.cn/tracy5546/dynamic-datasource/content\n    dynamic:\n      # 性能分析插件(有性能损耗 不建议生产环境使用)\n      p6spy: false\n      # 开启seata代理，开启后默认每个数据源都代理，如果某个不需要代理可单独关闭\n      # seata: false\n      # 严格模式 匹配不到数据源则报错\n      strict: true\n      hikari:\n        # 最大连接池数量\n        maxPoolSize: 20\n        # 最小空闲线程数量\n        minIdle: 10\n        # 配置获取连接等待超时的时间\n        connectionTimeout: 30000\n        # 校验超时时间\n        validationTimeout: 5000\n        # 空闲连接存活最大时间，默认10分钟\n        idleTimeout: 600000\n        # 此属性控制池中连接的最长生命周期，值0表示无限生命周期，默认30分钟\n        maxLifetime: 1800000\n        # 连接测试query（配置检测连接是否有效）\n        connectionTestQuery: SELECT 1\n        # 多久检查一次连接的活性\n        keepaliveTime: 30000\n\n\n# seata配置\nseata:\n  # 关闭自动代理\n  enable-auto-data-source-proxy: false\n\n\n# MyBatisPlus配置  (https://baomidou.com/config/)\nmybatis-plus:\n  # 扫描mapper接口包有两种: (法1: 默认扫描(也就是加@Mapper注解);  法2: 手动扫描, 在相关启动配置类加上@MapperScan(\"要扫描包的路径\"),  \n  # 本项目用的是 法2 (因为基本上整个项目的包名前缀都是一样的,除非要注入第三方的bean); 如有需要支持多包可在注解配置 或 提升扫包等级 (例如 com.**.**.mapper)\n  mapperPackage: com.fly.**.mapper\n  # 对应的 XML 文件位置\n  mapperLocations: classpath*:mapper/**/*Mapper.xml\n  # 实体扫描，多个package用逗号或者分号分隔\n  typeAliasesPackage: com.fly.**.domain\n  # 启动时是否检查 MyBatis XML 文件的存在，默认不检查\n  checkConfigLocation: false\n  configuration:\n    # 自动驼峰命名规则（camel case）映射\n    mapUnderscoreToCamelCase: true\n    # MyBatis 自动映射策略\n    # NONE：不启用 PARTIAL：只对非嵌套 resultMap 自动映射 FULL：对所有 resultMap 自动映射\n    autoMappingBehavior: PARTIAL\n    # MyBatis 自动映射时未知列或未知属性处理策\n    # NONE：不做处理 WARNING：打印相关警告 FAILING：抛出异常和详细信息\n    autoMappingUnknownColumnBehavior: NONE\n    # 更详细的日志输出 会有性能损耗 org.apache.ibatis.logging.stdout.StdOutImpl\n    # 关闭日志记录 (可单纯使用 p6spy 分析) org.apache.ibatis.logging.nologging.NoLoggingImpl\n    # 默认日志输出 org.apache.ibatis.logging.slf4j.Slf4jImpl\n    logImpl: org.apache.ibatis.logging.nologging.NoLoggingImpl\n  global-config:\n    # 是否打印 Logo banner\n    banner: true\n    dbConfig:\n      # 主键类型\n      # AUTO 自增 NONE 空 INPUT 用户输入 ASSIGN_ID 雪花 ASSIGN_UUID 唯一 UUID\n      idType: ASSIGN_ID\n      # 逻辑已删除值\n      logicDeleteValue: 2\n      # 逻辑未删除值\n      logicNotDeleteValue: 0\n      insertStrategy: NOT_NULL\n      updateStrategy: NOT_NULL\n      where-strategy: NOT_NULL\n\n', '0082c630b61ab1d09f97902b89948fb8', '2023-04-21 11:40:44', '2023-04-21 11:40:44', 'nacos', '120.85.113.241', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (36, 67, 'flycloud-gen-dev.yaml', 'DEFAULT_GROUP', '', '\nspring:\n  datasource:\n    type: ${spring.datasource.type}\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: ${datasource.gen.url}\n    username: ${datasource.gen.username}\n    password: ${datasource.gen.password}\n\n#        oracle:\n#          type: ${spring.datasource.type}\n#          driverClassName: oracle.jdbc.OracleDriver\n#          url: ${datasource.system-oracle.url}\n#          username: ${datasource.system-oracle.username}\n#          password: ${datasource.system-oracle.password}\n#          hikari:\n#            connectionTestQuery: SELECT 1 FROM DUAL\n\n#        postgres:\n#          type: ${spring.datasource.type}\n#          driverClassName: org.postgresql.Driver\n#          url: ${datasource.system-postgres.url}\n#          username: ${datasource.system-postgres.username}\n#          password: ${datasource.system-postgres.password}\n\n# 代码生成 配置\ngen:\n  # 作者\n  author: fly\n  # 默认生成包路径 system 需改成自己的模块名称 如 system monitor tool\n  packageName: com.fly.system\n  # 自动去除表前缀，默认是false\n  autoRemovePre: false\n  # 表前缀（生成类名不会包含表前缀，多个用逗号分隔）\n  tablePrefix: sys_\n\n', '30f3847a6356e97000b4c435e9f626b4', '2023-04-21 13:26:10', '2023-04-21 13:26:10', 'nacos', '116.21.159.246', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (0, 68, 'flycloud-generator-dev.yaml', 'DEFAULT_GROUP', '', '\nspring:\n  datasource:\n    dynamic:\n      # 设置默认的数据源或者数据源组,默认值即为 master\n      primary: master\n      datasource:\n        # 主库数据源\n        master:\n          type: ${spring.datasource.type}\n          driver-class-name: com.mysql.cj.jdbc.Driver\n          url: ${datasource.system-master.url}\n          username: ${datasource.system-master.username}\n          password: ${datasource.system-master.password}\n\n\n#        oracle:\n#          type: ${spring.datasource.type}\n#          driverClassName: oracle.jdbc.OracleDriver\n#          url: ${datasource.system-oracle.url}\n#          username: ${datasource.system-oracle.username}\n#          password: ${datasource.system-oracle.password}\n#          hikari:\n#            connectionTestQuery: SELECT 1 FROM DUAL\n\n#        postgres:\n#          type: ${spring.datasource.type}\n#          driverClassName: org.postgresql.Driver\n#          url: ${datasource.system-postgres.url}\n#          username: ${datasource.system-postgres.username}\n#          password: ${datasource.system-postgres.password}\n\n# 代码生成 配置\ngen:\n  # 作者\n  author: fly\n  # 默认生成包路径 system 需改成自己的模块名称 如 system monitor tool\n  packageName: com.fly.system\n  # 自动去除表前缀，默认是false\n  autoRemovePre: false\n  # 表前缀（生成类名不会包含表前缀，多个用逗号分隔）\n  tablePrefix: sys_', 'f266a6b3de235c6628c4d0694d2e993e', '2023-04-21 13:35:21', '2023-04-21 13:35:22', NULL, '116.21.159.246', 'I', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (36, 69, 'flycloud-gen-dev.yaml', 'DEFAULT_GROUP', '', '\nspring:\n  datasource:\n    dynamic:\n      # 设置默认的数据源或者数据源组,默认值即为 master\n      primary: master\n      datasource:\n        # 主库数据源\n        master:\n          type: ${spring.datasource.type}\n          driver-class-name: com.mysql.cj.jdbc.Driver\n          url: ${datasource.system-master.url}\n          username: ${datasource.system-master.username}\n          password: ${datasource.system-master.password}\n\n\n#        oracle:\n#          type: ${spring.datasource.type}\n#          driverClassName: oracle.jdbc.OracleDriver\n#          url: ${datasource.system-oracle.url}\n#          username: ${datasource.system-oracle.username}\n#          password: ${datasource.system-oracle.password}\n#          hikari:\n#            connectionTestQuery: SELECT 1 FROM DUAL\n\n#        postgres:\n#          type: ${spring.datasource.type}\n#          driverClassName: org.postgresql.Driver\n#          url: ${datasource.system-postgres.url}\n#          username: ${datasource.system-postgres.username}\n#          password: ${datasource.system-postgres.password}\n\n# 代码生成 配置\ngen:\n  # 作者\n  author: fly\n  # 默认生成包路径 system 需改成自己的模块名称 如 system monitor tool\n  packageName: com.fly.system\n  # 自动去除表前缀，默认是false\n  autoRemovePre: false\n  # 表前缀（生成类名不会包含表前缀，多个用逗号分隔）\n  tablePrefix: sys_\n\n', '4390969ebe275054bdd478b631e5fbfd', '2023-04-21 13:35:36', '2023-04-21 13:35:36', NULL, '116.21.159.246', 'D', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (64, 70, 'flycloud-generator-dev.yaml', 'DEFAULT_GROUP', '', '\nspring:\n  datasource:\n    dynamic:\n      # 设置默认的数据源或者数据源组,默认值即为 master\n      primary: master\n      datasource:\n        # 主库数据源\n        master:\n          type: ${spring.datasource.type}\n          driver-class-name: com.mysql.cj.jdbc.Driver\n          url: ${datasource.system-master.url}\n          username: ${datasource.system-master.username}\n          password: ${datasource.system-master.password}\n\n\n#        oracle:\n#          type: ${spring.datasource.type}\n#          driverClassName: oracle.jdbc.OracleDriver\n#          url: ${datasource.system-oracle.url}\n#          username: ${datasource.system-oracle.username}\n#          password: ${datasource.system-oracle.password}\n#          hikari:\n#            connectionTestQuery: SELECT 1 FROM DUAL\n\n#        postgres:\n#          type: ${spring.datasource.type}\n#          driverClassName: org.postgresql.Driver\n#          url: ${datasource.system-postgres.url}\n#          username: ${datasource.system-postgres.username}\n#          password: ${datasource.system-postgres.password}\n\n# 代码生成 配置\ngen:\n  # 作者\n  author: fly\n  # 默认生成包路径 system 需改成自己的模块名称 如 system monitor tool\n  packageName: com.fly.system\n  # 自动去除表前缀，默认是false\n  autoRemovePre: false\n  # 表前缀（生成类名不会包含表前缀，多个用逗号分隔）\n  tablePrefix: sys_', 'f266a6b3de235c6628c4d0694d2e993e', '2023-04-21 13:35:50', '2023-04-21 13:35:51', 'nacos', '116.21.159.246', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (1, 71, 'application-common.yaml', 'DEFAULT_GROUP', '', '\n# spring 配置\nspring:\n  # 资源信息\n  messages:\n    # 国际化资源文件路径\n    basename: i18n/messages\n  servlet:\n    multipart:\n      # 单个文件大小\n      max-file-size: 1000MB\n      # 设置总上传的文件大小\n      max-request-size: 5000MB\n  mvc:\n    format:\n      date-time: yyyy-MM-dd HH:mm:ss\n  #jackson配置\n  jackson:\n    # 日期格式化\n    date-format: yyyy-MM-dd HH:mm:ss\n    time-zone: GMT+8\n    serialization:\n      # 格式化输出\n      INDENT_OUTPUT: false\n      # 忽略无法转换的对象\n      fail_on_empty_beans: false\n    deserialization:\n      # 允许对象忽略json中不存在的属性\n      fail_on_unknown_properties: false\n  cloud:\n    # sentinel 配置\n    # sentinel:\n    #   # sentinel 开关\n    #   enabled: true\n    #   # 取消控制台懒加载\n    #   eager: true\n    #   transport:\n    #     # dashboard控制台服务名 用于服务发现\n    #     # 如无此配置将默认使用下方 dashboard 配置直接注册\n    #     server-name: ruoyi-sentinel-dashboard\n    #     # 客户端指定注册的ip 用于多网卡ip不稳点使用\n    #     # client-ip:\n    #     # 控制台地址 从1.3.0开始使用 server-name 注册\n    #     # dashboard: localhost:8718\n\n  # redis通用配置 子服务可以自行配置进行覆盖\n  # redis:\n  #   host: 39.98.125.88\n  #   port: 6379\n  #   # 密码(如没有密码请注释掉)\n  #   # password:\n  #   database: 0\n  #   timeout: 10s\n  #   ssl: false\n\n\n# redisson 配置\n# redisson:\n#   # redis key前缀\n#   keyPrefix:\n#   # 线程池数量\n#   threads: 4\n#   # Netty线程池数量\n#   nettyThreads: 8\n#   # 单节点配置\n#   singleServerConfig:\n#     # 客户端名称\n#     clientName: ${spring.application.name}\n#     # 最小空闲连接数\n#     connectionMinimumIdleSize: 8\n#     # 连接池大小\n#     connectionPoolSize: 32\n#     # 连接空闲超时，单位：毫秒\n#     idleConnectionTimeout: 10000\n#     # 命令等待超时，单位：毫秒\n#     timeout: 3000\n#     # 发布和订阅连接池大小\n#     subscriptionConnectionPoolSize: 50\n\n\n# springdoc 配置\nspringdoc:\n  api-docs:\n    # 是否开启接口文档\n    enabled: true\n  swagger-ui:\n    # 持久化认证数据\n    persistAuthorization: true\n\n\n# swagger 配置\nswagger:\n  enabled: true\n  title: Fly Swagger API\n  gateway: http://localhost:8080\n  token-url: ${swagger.gateway}/auth/oauth/token\n  scope: server\n  services:\n    flycloud-gateway: flycloud-gateway\n    flycloud-system: flycloud-system\n    flycloud-mall: flycloud-mall\n    flycloud-music: flycloud-music\n    flycloud-generator: flycloud-generator\n    flycloud-job: flycloud-job\n', 'be9c27bd6761eaf648c6d621df08b3cf', '2023-04-23 03:31:18', '2023-04-23 03:31:18', 'nacos', '116.21.159.246', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (0, 72, 'flycloud-test-dev.yaml', 'DEFAULT_GROUP', '', '\nspring:\n  datasource:\n    dynamic:\n      # 设置默认的数据源或者数据源组,默认值即为 master\n      primary: master\n      datasource:\n        # 主库数据源\n        master:\n          type: ${spring.datasource.type}\n          driver-class-name: com.mysql.cj.jdbc.Driver\n          url: ${datasource.system-master.url}\n          username: ${datasource.system-master.username}\n          password: ${datasource.system-master.password}\n', '8e2306d55b225ae3992b1afad4042639', '2023-04-23 03:37:32', '2023-04-23 03:37:32', NULL, '116.21.159.246', 'I', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (1, 73, 'application-common.yaml', 'DEFAULT_GROUP', '', '\n# spring 配置\nspring:\n  # 资源信息\n  messages:\n    # 国际化资源文件路径\n    basename: i18n/messages\n  servlet:\n    multipart:\n      # 单个文件大小\n      max-file-size: 1000MB\n      # 设置总上传的文件大小\n      max-request-size: 5000MB\n  mvc:\n    format:\n      date-time: yyyy-MM-dd HH:mm:ss\n  #jackson配置\n  jackson:\n    # 日期格式化\n    date-format: yyyy-MM-dd HH:mm:ss\n    time-zone: GMT+8\n    serialization:\n      # 格式化输出\n      INDENT_OUTPUT: false\n      # 忽略无法转换的对象\n      fail_on_empty_beans: false\n    deserialization:\n      # 允许对象忽略json中不存在的属性\n      fail_on_unknown_properties: false\n  cloud:\n    # sentinel 配置\n    # sentinel:\n    #   # sentinel 开关\n    #   enabled: true\n    #   # 取消控制台懒加载\n    #   eager: true\n    #   transport:\n    #     # dashboard控制台服务名 用于服务发现\n    #     # 如无此配置将默认使用下方 dashboard 配置直接注册\n    #     server-name: ruoyi-sentinel-dashboard\n    #     # 客户端指定注册的ip 用于多网卡ip不稳点使用\n    #     # client-ip:\n    #     # 控制台地址 从1.3.0开始使用 server-name 注册\n    #     # dashboard: localhost:8718\n\n  # redis 通用配置 子服务可以自行配置进行覆盖\n  redis:\n    host: 39.98.125.88\n    port: 6379\n    # 密码(如没有密码请注释掉)\n    # password:\n    database: 0\n    timeout: 30s\n    ssl: false\n\n\n# redisson 配置\nredisson:\n  # redis key前缀\n  keyPrefix:\n  # 线程池数量\n  threads: 4\n  # Netty线程池数量\n  nettyThreads: 8\n  # 单节点配置\n  singleServerConfig:\n    # 客户端名称\n    clientName: ${spring.application.name}\n    # 最小空闲连接数\n    connectionMinimumIdleSize: 8\n    # 连接池大小\n    connectionPoolSize: 32\n    # 连接空闲超时，单位：毫秒\n    idleConnectionTimeout: 10000\n    # 命令等待超时，单位：毫秒\n    timeout: 3000\n    # 发布和订阅连接池大小\n    subscriptionConnectionPoolSize: 50\n\n\n# springdoc 配置\nspringdoc:\n  api-docs:\n    # 是否开启接口文档\n    enabled: true\n  swagger-ui:\n    # 持久化认证数据\n    persistAuthorization: true\n\n\n# swagger 配置\nswagger:\n  enabled: true\n  title: Fly Swagger API\n  gateway: http://localhost:8080\n  token-url: ${swagger.gateway}/auth/oauth/token\n  scope: server\n  services:\n    flycloud-gateway: flycloud-gateway\n    flycloud-system: flycloud-system\n    flycloud-mall: flycloud-mall\n    flycloud-music: flycloud-music\n    flycloud-generator: flycloud-generator\n    flycloud-job: flycloud-job\n', '1a57ad2f71f50e77521af1f00d040605', '2023-04-23 03:56:21', '2023-04-23 03:56:22', 'nacos', '116.21.159.246', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (10, 74, 'flycloud-gateway-dev.yaml', 'DEFAULT_GROUP', '', '\nspring:\n  cloud:\n    # 网关配置\n    gateway:\n      metrics:\n        enabled: true\n      # 打印请求日志(自定义)\n      requestLog: true\n      discovery:\n        locator:\n          # 开启服务注册和发现\n          enabled: true\n          # 自动配置路由 (手动写路由的话, swagger整合不了)\n      routes:\n\n        # swagger接口地址重写 (只改变转发路由,无其他修改), 如将 https://localhost:8080/v3/api-docs/flycloud-system 这个路径重写为 https://localhost:8080/flycloud-system/v3/api-docs\n        - id: openapi\n          uri: lb://flycloud-gateway\n          predicates:\n            - Path=/v3/api-docs/**\n          filters:\n            - RewritePath=/v3/api-docs/(?<path>.*), /$\\{path}/v3/api-docs\n\n        - id: flycloud-system              # 路由id，没有固定规则但要求唯一, 建议配合服务名\n          # uri: http://localhost:8001     # 目标地址, 即断言匹配后跳转的路由地址 (即类似nginx的代理地址)\n          uri: lb://flycloud-system\n          order: 1\n          predicates:                      # 断言（判断条件）\n            - Path=/flycloud-system/**     # 断言, 路径相匹配的进行路由; 服务一般不用设置servlet-context-path,因为直接让客户端请求带上此断言服务名字即可 (即类似nginx的断言)\n          # filters:\n            # - StripPrefix=1              # 去除第一个路径 (http://localhost:8080/aaa/order/orderInfo -> http://localhost:8080/order/orderInfo)\n            # - PrefixPath=/order          # 请求路径添加前缀 (http://localhost:8080/order/orderInfo -> http://localhost:8080/aaa/order/orderInfo)\n\n            # - RewritePath=/v3/api-docs/(?<path>.*), /$\\{path}/v3/api-docs\n            # 路由重写 (断言之前执行), 如将 https://localhost:8080/v3/api-docs/flycloud-system 这个路径重写为 https://localhost:8080/flycloud-system/v3/api-docs\n\n        - id: flycloud-mall\n          uri: lb://flycloud-mall\n          predicates:\n            - Path=/flycloud-mall/**\n\n        - id: flycloud-generator\n          uri: lb://flycloud-generator\n          predicates:\n            - Path=/flycloud-generator/**\n\n\nlogging:\n  level:\n    org:\n      springframework:\n        cloud:\n          gateway: TRACE', '559d0fc64e7d3c209bf7dcd536ccba4d', '2023-04-23 03:58:50', '2023-04-23 03:58:51', 'nacos', '120.85.113.241', 'U', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (1, 75, 'application-common.yaml', 'DEFAULT_GROUP', '', '\n# spring 配置\nspring:\n  # 资源信息\n  messages:\n    # 国际化资源文件路径\n    basename: i18n/messages\n  servlet:\n    multipart:\n      # 单个文件大小\n      max-file-size: 1000MB\n      # 设置总上传的文件大小\n      max-request-size: 5000MB\n  mvc:\n    format:\n      date-time: yyyy-MM-dd HH:mm:ss\n  #jackson配置\n  jackson:\n    # 日期格式化\n    date-format: yyyy-MM-dd HH:mm:ss\n    time-zone: GMT+8\n    serialization:\n      # 格式化输出\n      INDENT_OUTPUT: false\n      # 忽略无法转换的对象\n      fail_on_empty_beans: false\n    deserialization:\n      # 允许对象忽略json中不存在的属性\n      fail_on_unknown_properties: false\n  cloud:\n    # sentinel 配置\n    # sentinel:\n    #   # sentinel 开关\n    #   enabled: true\n    #   # 取消控制台懒加载\n    #   eager: true\n    #   transport:\n    #     # dashboard控制台服务名 用于服务发现\n    #     # 如无此配置将默认使用下方 dashboard 配置直接注册\n    #     server-name: ruoyi-sentinel-dashboard\n    #     # 客户端指定注册的ip 用于多网卡ip不稳点使用\n    #     # client-ip:\n    #     # 控制台地址 从1.3.0开始使用 server-name 注册\n    #     # dashboard: localhost:8718\n\n  # redis 通用配置 子服务可以自行配置进行覆盖\n  redis:\n    host: 39.98.125.88\n    port: 6379\n    # 密码(如没有密码请注释掉password字段)\n    password: 123456\n    database: 0\n    timeout: 30s\n    ssl: false\n\n\n# redisson 配置\nredisson:\n  # redis key前缀\n  keyPrefix:\n  # 线程池数量\n  threads: 4\n  # Netty线程池数量\n  nettyThreads: 8\n  # 单节点配置\n  singleServerConfig:\n    # 客户端名称\n    clientName: ${spring.application.name}\n    # 最小空闲连接数\n    connectionMinimumIdleSize: 8\n    # 连接池大小\n    connectionPoolSize: 32\n    # 连接空闲超时，单位：毫秒\n    idleConnectionTimeout: 10000\n    # 命令等待超时，单位：毫秒\n    timeout: 3000\n    # 发布和订阅连接池大小\n    subscriptionConnectionPoolSize: 50\n\n\n# springdoc 配置\nspringdoc:\n  api-docs:\n    # 是否开启接口文档\n    enabled: true\n  swagger-ui:\n    # 持久化认证数据\n    persistAuthorization: true\n\n\n# swagger 配置\nswagger:\n  enabled: true\n  title: Fly Swagger API\n  gateway: http://localhost:8080\n  token-url: ${swagger.gateway}/auth/oauth/token\n  scope: server\n  services:\n    flycloud-gateway: flycloud-gateway\n    flycloud-system: flycloud-system\n    flycloud-mall: flycloud-mall\n    flycloud-music: flycloud-music\n    flycloud-generator: flycloud-generator\n    flycloud-job: flycloud-job\n', '0047278b838e211cd3e3cb1f7c41b6a0', '2023-04-23 03:59:15', '2023-04-23 03:59:16', 'nacos', '120.85.113.241', 'U', '', '');
COMMIT;

-- ----------------------------
-- Table structure for permissions
-- ----------------------------
DROP TABLE IF EXISTS `permissions`;
CREATE TABLE `permissions` (
  `role` varchar(50) NOT NULL,
  `resource` varchar(255) NOT NULL,
  `action` varchar(8) NOT NULL,
  UNIQUE KEY `uk_role_permission` (`role`,`resource`,`action`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Records of permissions
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for roles
-- ----------------------------
DROP TABLE IF EXISTS `roles`;
CREATE TABLE `roles` (
  `username` varchar(50) NOT NULL,
  `role` varchar(50) NOT NULL,
  UNIQUE KEY `idx_user_role` (`username`,`role`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Records of roles
-- ----------------------------
BEGIN;
INSERT INTO `roles` (`username`, `role`) VALUES ('nacos', 'ROLE_ADMIN');
COMMIT;

-- ----------------------------
-- Table structure for tenant_capacity
-- ----------------------------
DROP TABLE IF EXISTS `tenant_capacity`;
CREATE TABLE `tenant_capacity` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `tenant_id` varchar(128) COLLATE utf8_bin NOT NULL DEFAULT '' COMMENT 'Tenant ID',
  `quota` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '配额，0表示使用默认值',
  `usage` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '使用量',
  `max_size` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '单个配置大小上限，单位为字节，0表示使用默认值',
  `max_aggr_count` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '聚合子配置最大个数',
  `max_aggr_size` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值',
  `max_history_count` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '最大变更历史数量',
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_tenant_id` (`tenant_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='租户容量信息表';

-- ----------------------------
-- Records of tenant_capacity
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for tenant_info
-- ----------------------------
DROP TABLE IF EXISTS `tenant_info`;
CREATE TABLE `tenant_info` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `kp` varchar(128) COLLATE utf8_bin NOT NULL COMMENT 'kp',
  `tenant_id` varchar(128) COLLATE utf8_bin DEFAULT '' COMMENT 'tenant_id',
  `tenant_name` varchar(128) COLLATE utf8_bin DEFAULT '' COMMENT 'tenant_name',
  `tenant_desc` varchar(256) COLLATE utf8_bin DEFAULT NULL COMMENT 'tenant_desc',
  `create_source` varchar(32) COLLATE utf8_bin DEFAULT NULL COMMENT 'create_source',
  `gmt_create` bigint(20) NOT NULL COMMENT '创建时间',
  `gmt_modified` bigint(20) NOT NULL COMMENT '修改时间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`),
  KEY `idx_tenant_id` (`tenant_id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='tenant_info';

-- ----------------------------
-- Records of tenant_info
-- ----------------------------
BEGIN;
INSERT INTO `tenant_info` (`id`, `kp`, `tenant_id`, `tenant_name`, `tenant_desc`, `create_source`, `gmt_create`, `gmt_modified`) VALUES (1, '1', '98032a7a-cc91-4955-83cd-ba9ae12ad88b', 'dev', '开发环境', 'nacos', 1682047742850, 1682047742850);
INSERT INTO `tenant_info` (`id`, `kp`, `tenant_id`, `tenant_name`, `tenant_desc`, `create_source`, `gmt_create`, `gmt_modified`) VALUES (2, '1', '98fa7b23-cac3-4eb5-9b3f-0b40b7cb8aa2', 'test', '仿真环境', 'nacos', 1682047760861, 1682047760861);
INSERT INTO `tenant_info` (`id`, `kp`, `tenant_id`, `tenant_name`, `tenant_desc`, `create_source`, `gmt_create`, `gmt_modified`) VALUES (3, '1', 'c5ab8826-7c54-44ee-a089-49a3dd530652', 'prod', '生产环境', 'nacos', 1682047777279, 1682047777279);
COMMIT;

-- ----------------------------
-- Table structure for users
-- ----------------------------
DROP TABLE IF EXISTS `users`;
CREATE TABLE `users` (
  `username` varchar(50) NOT NULL,
  `password` varchar(500) NOT NULL,
  `enabled` tinyint(1) NOT NULL,
  PRIMARY KEY (`username`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Records of users
-- ----------------------------
BEGIN;
INSERT INTO `users` (`username`, `password`, `enabled`) VALUES ('ico', '$2a$10$KKC9nDk9KckaEI8I8ij6ouiQCN2AaGhODigvF/moO4Ig6P3r4gWu6', 1);
INSERT INTO `users` (`username`, `password`, `enabled`) VALUES ('nacos', '$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu', 1);
COMMIT;

SET FOREIGN_KEY_CHECKS = 1;
